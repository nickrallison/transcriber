use crate::{FileCategory, FileType, StringFile};
use crate::transcription::audio_video::transcribe_av;
use crate::transcription::doc::transcribe_doc;
use crate::transcription::srt::transcribe_srt;
use crate::transcription::text::transcribe_text;

mod audio_video;
mod doc;
mod srt;
mod text;

pub fn transcribe_file(file: FileType) -> Result<StringFile, crate::error::Error> {
    match file.category() {
        FileCategory::Audio => transcribe_av(file),
        FileCategory::Video => transcribe_av(file),
        
        FileCategory::Html => transcribe_doc(file),
        FileCategory::Pdf => transcribe_doc(file),
        FileCategory::Image => transcribe_doc(file),
        FileCategory::Docx => transcribe_doc(file),
        FileCategory::Pptx => transcribe_doc(file),
        FileCategory::Xlsx => transcribe_doc(file),
        FileCategory::Md => transcribe_doc(file),
        
        FileCategory::Text => transcribe_text(file),
        
        FileCategory::Srt => transcribe_srt(file),
    }
}

fn read_string_file(file_type: FileType) -> Result<String, crate::error::Error> {
    match file_type {
        FileType::StringFile(string_file) => Ok(string_file.contents),
        FileType::PathFile(path_file) => Ok(std::fs::read_to_string(path_file.path)?),
    }
}

#[cfg(test)]
mod transcription_test {
    use rstest::rstest;
    use crate::{FileType, StringFile};
    use crate::transcription::transcribe_file;

    #[rstest]
    #[case("[{\"StringFile\":{\"file_name\":{\"Windows\":[84,104,101,32,65,110,97,116,111,109,121,32,111,102,32,97,32,77,111,100,101,114,110,32,67,80,85,32,67,97,99,104,101,32,72,105,101,114,97,114,99,104,121,46,101,110]},\"contents\":\"WEBVTT\\nKind: captions\\nLanguage: en\\n\\n00:00:00.240 --> 00:00:02.389 align:start position:0%\\n \\ndid<00:00:00.399><c> you</c><00:00:00.560><c> know</c><00:00:00.919><c> that</c><00:00:01.199><c> accessing</c><00:00:01.599><c> main</c><00:00:01.880><c> memory</c>\\n\\n00:00:02.389 --> 00:00:02.399 align:start position:0%\\ndid you know that accessing main memory\\n \\n\\n00:00:02.399 --> 00:00:04.590 align:start position:0%\\ndid you know that accessing main memory\\ncan<00:00:02.560><c> take</c><00:00:02.800><c> hundreds</c><00:00:03.199><c> of</c><00:00:03.360><c> CPU</c>\\n\\n00:00:04.590 --> 00:00:04.600 align:start position:0%\\ncan take hundreds of CPU\\n \\n\\n00:00:04.600 --> 00:00:07.230 align:start position:0%\\ncan take hundreds of CPU\\nCycles<00:00:05.600><c> the</c><00:00:05.759><c> processor</c><00:00:06.240><c> operates</c><00:00:06.680><c> at</c><00:00:06.839><c> a</c><00:00:07.000><c> very</c>\\n\\n00:00:07.230 --> 00:00:07.240 align:start position:0%\\nCycles the processor operates at a very\\n \\n\\n00:00:07.240 --> 00:00:09.190 align:start position:0%\\nCycles the processor operates at a very\\nhigh<00:00:07.480><c> speed</c><00:00:08.160><c> but</c><00:00:08.360><c> every</c><00:00:08.559><c> time</c><00:00:08.719><c> it</c><00:00:08.840><c> needs</c><00:00:09.040><c> to</c>\\n\\n00:00:09.190 --> 00:00:09.200 align:start position:0%\\nhigh speed but every time it needs to\\n \\n\\n00:00:09.200 --> 00:00:11.509 align:start position:0%\\nhigh speed but every time it needs to\\nfetch<00:00:09.519><c> data</c><00:00:09.719><c> for</c><00:00:09.920><c> main</c><00:00:10.200><c> memory</c><00:00:10.840><c> it's</c><00:00:11.040><c> forced</c>\\n\\n00:00:11.509 --> 00:00:11.519 align:start position:0%\\nfetch data for main memory it's forced\\n \\n\\n00:00:11.519 --> 00:00:13.589 align:start position:0%\\nfetch data for main memory it's forced\\nto<00:00:11.719><c> wait</c><00:00:11.920><c> until</c><00:00:12.200><c> the</c><00:00:12.400><c> requested</c><00:00:12.880><c> data</c><00:00:13.120><c> is</c>\\n\\n00:00:13.589 --> 00:00:13.599 align:start position:0%\\nto wait until the requested data is\\n \\n\\n00:00:13.599 --> 00:00:15.990 align:start position:0%\\nto wait until the requested data is\\nretrieved<00:00:14.599><c> this</c><00:00:14.799><c> huge</c><00:00:15.120><c> delay</c><00:00:15.559><c> is</c><00:00:15.759><c> why</c>\\n\\n00:00:15.990 --> 00:00:16.000 align:start position:0%\\nretrieved this huge delay is why\\n \\n\\n00:00:16.000 --> 00:00:18.070 align:start position:0%\\nretrieved this huge delay is why\\ncomputers<00:00:16.440><c> have</c><00:00:16.640><c> caches</c><00:00:17.279><c> to</c><00:00:17.439><c> keep</c><00:00:17.680><c> the</c><00:00:17.840><c> data</c>\\n\\n00:00:18.070 --> 00:00:18.080 align:start position:0%\\ncomputers have caches to keep the data\\n \\n\\n00:00:18.080 --> 00:00:20.429 align:start position:0%\\ncomputers have caches to keep the data\\nthe<00:00:18.199><c> CPU</c><00:00:18.520><c> needs</c><00:00:18.840><c> closer</c><00:00:19.439><c> and</c><00:00:19.600><c> minimize</c><00:00:20.160><c> those</c>\\n\\n00:00:20.429 --> 00:00:20.439 align:start position:0%\\nthe CPU needs closer and minimize those\\n \\n\\n00:00:20.439 --> 00:00:22.990 align:start position:0%\\nthe CPU needs closer and minimize those\\ncostly\\n\\n00:00:22.990 --> 00:00:23.000 align:start position:0%\\n \\n \\n\\n00:00:23.000 --> 00:00:25.550 align:start position:0%\\n \\ninterruptions<00:00:24.000><c> modern</c><00:00:24.320><c> CPUs</c><00:00:24.960><c> feature</c><00:00:25.359><c> a</c>\\n\\n00:00:25.550 --> 00:00:25.560 align:start position:0%\\ninterruptions modern CPUs feature a\\n \\n\\n00:00:25.560 --> 00:00:27.710 align:start position:0%\\ninterruptions modern CPUs feature a\\nhierarchial<00:00:26.279><c> cache</c><00:00:26.560><c> system</c><00:00:27.119><c> where</c><00:00:27.320><c> the</c><00:00:27.439><c> cache</c>\\n\\n00:00:27.710 --> 00:00:27.720 align:start position:0%\\nhierarchial cache system where the cache\\n \\n\\n00:00:27.720 --> 00:00:29.349 align:start position:0%\\nhierarchial cache system where the cache\\nclosest<00:00:28.080><c> to</c><00:00:28.199><c> the</c><00:00:28.400><c> processor</c><00:00:28.800><c> core</c><00:00:29.080><c> is</c><00:00:29.240><c> the</c>\\n\\n00:00:29.349 --> 00:00:29.359 align:start position:0%\\nclosest to the processor core is the\\n \\n\\n00:00:29.359 --> 00:00:31.589 align:start position:0%\\nclosest to the processor core is the\\nsmallest<00:00:29.720><c> in</c><00:00:30.080><c> fastest</c><00:00:30.800><c> while</c><00:00:31.000><c> the</c><00:00:31.080><c> furthest</c>\\n\\n00:00:31.589 --> 00:00:31.599 align:start position:0%\\nsmallest in fastest while the furthest\\n \\n\\n00:00:31.599 --> 00:00:33.790 align:start position:0%\\nsmallest in fastest while the furthest\\ncache<00:00:32.079><c> is</c><00:00:32.239><c> the</c><00:00:32.399><c> largest</c><00:00:33.000><c> but</c>\\n\\n00:00:33.790 --> 00:00:33.800 align:start position:0%\\ncache is the largest but\\n \\n\\n00:00:33.800 --> 00:00:36.389 align:start position:0%\\ncache is the largest but\\nslowest<00:00:34.800><c> large</c><00:00:35.120><c> caches</c><00:00:35.480><c> are</c><00:00:35.640><c> inherently</c><00:00:36.120><c> more</c>\\n\\n00:00:36.389 --> 00:00:36.399 align:start position:0%\\nslowest large caches are inherently more\\n \\n\\n00:00:36.399 --> 00:00:38.270 align:start position:0%\\nslowest large caches are inherently more\\ncomplex<00:00:37.040><c> which</c><00:00:37.239><c> increases</c><00:00:37.680><c> their</c><00:00:37.960><c> access</c>\\n\\n00:00:38.270 --> 00:00:38.280 align:start position:0%\\ncomplex which increases their access\\n \\n\\n00:00:38.280 --> 00:00:40.430 align:start position:0%\\ncomplex which increases their access\\ntimes<00:00:38.840><c> so</c><00:00:39.040><c> to</c><00:00:39.200><c> maximize</c><00:00:39.719><c> performance</c><00:00:40.239><c> while</c>\\n\\n00:00:40.430 --> 00:00:40.440 align:start position:0%\\ntimes so to maximize performance while\\n \\n\\n00:00:40.440 --> 00:00:42.430 align:start position:0%\\ntimes so to maximize performance while\\nreducing<00:00:40.840><c> latency</c><00:00:41.360><c> and</c><00:00:41.559><c> cost</c><00:00:42.079><c> the</c><00:00:42.200><c> first</c>\\n\\n00:00:42.430 --> 00:00:42.440 align:start position:0%\\nreducing latency and cost the first\\n \\n\\n00:00:42.440 --> 00:00:44.869 align:start position:0%\\nreducing latency and cost the first\\nlevel<00:00:42.680><c> of</c><00:00:42.879><c> cache</c><00:00:43.160><c> known</c><00:00:43.399><c> as</c><00:00:43.559><c> L1</c><00:00:44.200><c> is</c><00:00:44.399><c> designed</c>\\n\\n00:00:44.869 --> 00:00:44.879 align:start position:0%\\nlevel of cache known as L1 is designed\\n \\n\\n00:00:44.879 --> 00:00:46.790 align:start position:0%\\nlevel of cache known as L1 is designed\\nto<00:00:45.000><c> be</c><00:00:45.200><c> very</c><00:00:45.399><c> small</c><00:00:45.800><c> to</c><00:00:46.039><c> match</c><00:00:46.280><c> the</c><00:00:46.399><c> speed</c><00:00:46.680><c> of</c>\\n\\n00:00:46.790 --> 00:00:46.800 align:start position:0%\\nto be very small to match the speed of\\n \\n\\n00:00:46.800 --> 00:00:47.590 align:start position:0%\\nto be very small to match the speed of\\nthe\\n\\n00:00:47.590 --> 00:00:47.600 align:start position:0%\\nthe\\n \\n\\n00:00:47.600 --> 00:00:50.110 align:start position:0%\\nthe\\nprocessor<00:00:48.600><c> L1</c><00:00:49.120><c> caches</c><00:00:49.480><c> are</c><00:00:49.680><c> typically</c>\\n\\n00:00:50.110 --> 00:00:50.120 align:start position:0%\\nprocessor L1 caches are typically\\n \\n\\n00:00:50.120 --> 00:00:52.630 align:start position:0%\\nprocessor L1 caches are typically\\ndivided<00:00:50.520><c> into</c><00:00:50.760><c> two</c><00:00:51.000><c> separate</c><00:00:51.399><c> components</c><00:00:52.359><c> one</c>\\n\\n00:00:52.630 --> 00:00:52.640 align:start position:0%\\ndivided into two separate components one\\n \\n\\n00:00:52.640 --> 00:00:54.630 align:start position:0%\\ndivided into two separate components one\\noptimized<00:00:53.120><c> for</c><00:00:53.320><c> data</c><00:00:53.520><c> fetching</c><00:00:54.160><c> and</c><00:00:54.320><c> another</c>\\n\\n00:00:54.630 --> 00:00:54.640 align:start position:0%\\noptimized for data fetching and another\\n \\n\\n00:00:54.640 --> 00:00:57.630 align:start position:0%\\noptimized for data fetching and another\\nfor<00:00:54.800><c> storing</c><00:00:55.760><c> instructions</c><00:00:56.760><c> at</c><00:00:56.960><c> this</c><00:00:57.160><c> point</c>\\n\\n00:00:57.630 --> 00:00:57.640 align:start position:0%\\nfor storing instructions at this point\\n \\n\\n00:00:57.640 --> 00:00:59.470 align:start position:0%\\nfor storing instructions at this point\\nthe<00:00:57.800><c> size</c><00:00:58.000><c> of</c><00:00:58.120><c> the</c><00:00:58.280><c> cache</c><00:00:58.600><c> becomes</c><00:00:58.879><c> a</c><00:00:59.000><c> limiting</c>\\n\\n00:00:59.470 --> 00:00:59.480 align:start position:0%\\nthe size of the cache becomes a limiting\\n \\n\\n00:00:59.480 --> 00:01:02.069 align:start position:0%\\nthe size of the cache becomes a limiting\\nfactor<00:01:00.239><c> so</c><00:01:00.440><c> to</c><00:01:00.600><c> solve</c><00:01:01.000><c> this</c><00:01:01.399><c> many</c><00:01:01.640><c> CPU</c>\\n\\n00:01:02.069 --> 00:01:02.079 align:start position:0%\\nfactor so to solve this many CPU\\n \\n\\n00:01:02.079 --> 00:01:04.070 align:start position:0%\\nfactor so to solve this many CPU\\narchitectures<00:01:02.760><c> incorporate</c><00:01:03.359><c> an</c><00:01:03.559><c> additional</c>\\n\\n00:01:04.070 --> 00:01:04.080 align:start position:0%\\narchitectures incorporate an additional\\n \\n\\n00:01:04.080 --> 00:01:06.429 align:start position:0%\\narchitectures incorporate an additional\\ncache<00:01:04.519><c> that</c><00:01:04.640><c> is</c><00:01:04.799><c> larger</c><00:01:05.239><c> in</c><00:01:05.479><c> size</c><00:01:06.000><c> but</c><00:01:06.159><c> works</c>\\n\\n00:01:06.429 --> 00:01:06.439 align:start position:0%\\ncache that is larger in size but works\\n \\n\\n00:01:06.439 --> 00:01:09.149 align:start position:0%\\ncache that is larger in size but works\\nat<00:01:06.600><c> lower</c><00:01:06.920><c> speeds</c><00:01:07.720><c> this</c><00:01:07.880><c> is</c><00:01:08.080><c> known</c><00:01:08.280><c> as</c><00:01:08.400><c> L2</c>\\n\\n00:01:09.149 --> 00:01:09.159 align:start position:0%\\nat lower speeds this is known as L2\\n \\n\\n00:01:09.159 --> 00:01:12.070 align:start position:0%\\nat lower speeds this is known as L2\\ncache<00:01:10.159><c> the</c><00:01:10.280><c> L2</c><00:01:10.720><c> cache</c><00:01:10.920><c> is</c><00:01:11.040><c> usually</c><00:01:11.320><c> a</c><00:01:11.479><c> unified</c>\\n\\n00:01:12.070 --> 00:01:12.080 align:start position:0%\\ncache the L2 cache is usually a unified\\n \\n\\n00:01:12.080 --> 00:01:14.310 align:start position:0%\\ncache the L2 cache is usually a unified\\ncache<00:01:12.600><c> which</c><00:01:12.759><c> means</c><00:01:13.000><c> it</c><00:01:13.159><c> can</c><00:01:13.280><c> store</c><00:01:13.640><c> both</c><00:01:13.960><c> data</c>\\n\\n00:01:14.310 --> 00:01:14.320 align:start position:0%\\ncache which means it can store both data\\n \\n\\n00:01:14.320 --> 00:01:16.950 align:start position:0%\\ncache which means it can store both data\\nand<00:01:14.960><c> instructions</c><00:01:15.960><c> it</c><00:01:16.119><c> is</c><00:01:16.280><c> dedicated</c><00:01:16.680><c> to</c><00:01:16.799><c> a</c>\\n\\n00:01:16.950 --> 00:01:16.960 align:start position:0%\\nand instructions it is dedicated to a\\n \\n\\n00:01:16.960 --> 00:01:19.070 align:start position:0%\\nand instructions it is dedicated to a\\nsingle<00:01:17.320><c> processor</c><00:01:17.799><c> core</c><00:01:18.280><c> and</c><00:01:18.439><c> can</c><00:01:18.640><c> directly</c>\\n\\n00:01:19.070 --> 00:01:19.080 align:start position:0%\\nsingle processor core and can directly\\n \\n\\n00:01:19.080 --> 00:01:21.789 align:start position:0%\\nsingle processor core and can directly\\ncommunicate<00:01:19.600><c> with</c><00:01:19.759><c> the</c><00:01:19.880><c> L1</c><00:01:20.400><c> caches</c><00:01:21.400><c> but</c><00:01:21.560><c> most</c>\\n\\n00:01:21.789 --> 00:01:21.799 align:start position:0%\\ncommunicate with the L1 caches but most\\n \\n\\n00:01:21.799 --> 00:01:24.030 align:start position:0%\\ncommunicate with the L1 caches but most\\nmodern<00:01:22.200><c> systems</c><00:01:22.520><c> are</c><00:01:22.720><c> multi-core</c><00:01:23.439><c> systems</c>\\n\\n00:01:24.030 --> 00:01:24.040 align:start position:0%\\nmodern systems are multi-core systems\\n \\n\\n00:01:24.040 --> 00:01:25.789 align:start position:0%\\nmodern systems are multi-core systems\\nand<00:01:24.200><c> need</c><00:01:24.360><c> a</c><00:01:24.520><c> fast</c><00:01:24.840><c> way</c><00:01:25.040><c> to</c><00:01:25.200><c> share</c><00:01:25.520><c> data</c>\\n\\n00:01:25.789 --> 00:01:25.799 align:start position:0%\\nand need a fast way to share data\\n \\n\\n00:01:25.799 --> 00:01:28.149 align:start position:0%\\nand need a fast way to share data\\nbetween<00:01:26.159><c> them</c><00:01:26.960><c> that's</c><00:01:27.119><c> why</c><00:01:27.280><c> CPUs</c><00:01:27.799><c> usually</c>\\n\\n00:01:28.149 --> 00:01:28.159 align:start position:0%\\nbetween them that's why CPUs usually\\n \\n\\n00:01:28.159 --> 00:01:31.149 align:start position:0%\\nbetween them that's why CPUs usually\\nhave<00:01:28.360><c> another</c><00:01:28.799><c> cache</c><00:01:29.400><c> L3</c>\\n\\n00:01:31.149 --> 00:01:31.159 align:start position:0%\\nhave another cache L3\\n \\n\\n00:01:31.159 --> 00:01:34.310 align:start position:0%\\nhave another cache L3\\nthis<00:01:31.360><c> cache</c><00:01:31.600><c> is</c><00:01:31.759><c> larger</c><00:01:32.280><c> but</c><00:01:32.399><c> slower</c><00:01:32.799><c> than</c><00:01:33.320><c> L2</c>\\n\\n00:01:34.310 --> 00:01:34.320 align:start position:0%\\nthis cache is larger but slower than L2\\n \\n\\n00:01:34.320 --> 00:01:36.990 align:start position:0%\\nthis cache is larger but slower than L2\\nit<00:01:34.479><c> serves</c><00:01:34.840><c> two</c><00:01:35.040><c> main</c><00:01:35.479><c> purposes</c><00:01:36.479><c> it</c><00:01:36.640><c> allows</c>\\n\\n00:01:36.990 --> 00:01:37.000 align:start position:0%\\nit serves two main purposes it allows\\n \\n\\n00:01:37.000 --> 00:01:38.950 align:start position:0%\\nit serves two main purposes it allows\\ndata<00:01:37.200><c> sharing</c><00:01:37.560><c> between</c><00:01:38.000><c> processor</c><00:01:38.399><c> cores</c>\\n\\n00:01:38.950 --> 00:01:38.960 align:start position:0%\\ndata sharing between processor cores\\n \\n\\n00:01:38.960 --> 00:01:41.550 align:start position:0%\\ndata sharing between processor cores\\nwithout<00:01:39.360><c> accessing</c><00:01:39.759><c> main</c><00:01:40.000><c> memory</c><00:01:40.840><c> and</c><00:01:41.399><c> it</c>\\n\\n00:01:41.550 --> 00:01:41.560 align:start position:0%\\nwithout accessing main memory and it\\n \\n\\n00:01:41.560 --> 00:01:43.149 align:start position:0%\\nwithout accessing main memory and it\\nprovides<00:01:41.920><c> an</c><00:01:42.079><c> additional</c><00:01:42.479><c> layer</c><00:01:42.880><c> in</c><00:01:43.000><c> the</c>\\n\\n00:01:43.149 --> 00:01:43.159 align:start position:0%\\nprovides an additional layer in the\\n \\n\\n00:01:43.159 --> 00:01:44.109 align:start position:0%\\nprovides an additional layer in the\\nmemory\\n\\n00:01:44.109 --> 00:01:44.119 align:start position:0%\\nmemory\\n \\n\\n00:01:44.119 --> 00:01:46.990 align:start position:0%\\nmemory\\nhierarchy<00:01:45.119><c> when</c><00:01:45.320><c> both</c><00:01:45.560><c> L1</c><00:01:46.000><c> and</c><00:01:46.119><c> L2</c><00:01:46.560><c> caches</c>\\n\\n00:01:46.990 --> 00:01:47.000 align:start position:0%\\nhierarchy when both L1 and L2 caches\\n \\n\\n00:01:47.000 --> 00:01:49.310 align:start position:0%\\nhierarchy when both L1 and L2 caches\\nmiss<00:01:47.560><c> the</c><00:01:47.680><c> L3</c><00:01:48.159><c> cache</c><00:01:48.439><c> is</c><00:01:48.600><c> checked</c><00:01:49.079><c> before</c>\\n\\n00:01:49.310 --> 00:01:49.320 align:start position:0%\\nmiss the L3 cache is checked before\\n \\n\\n00:01:49.320 --> 00:01:51.510 align:start position:0%\\nmiss the L3 cache is checked before\\nresorting<00:01:49.759><c> to</c><00:01:49.920><c> main</c><00:01:50.159><c> memory</c><00:01:51.159><c> some</c>\\n\\n00:01:51.510 --> 00:01:51.520 align:start position:0%\\nresorting to main memory some\\n \\n\\n00:01:51.520 --> 00:01:54.429 align:start position:0%\\nresorting to main memory some\\nspecialized<00:01:52.200><c> systems</c><00:01:52.880><c> add</c><00:01:53.159><c> an</c><00:01:53.360><c> L4</c><00:01:53.920><c> cache</c><00:01:54.240><c> on</c>\\n\\n00:01:54.429 --> 00:01:54.439 align:start position:0%\\nspecialized systems add an L4 cache on\\n \\n\\n00:01:54.439 --> 00:01:56.830 align:start position:0%\\nspecialized systems add an L4 cache on\\ntop<00:01:54.640><c> of</c><00:01:54.759><c> the</c><00:01:54.880><c> usual</c><00:01:55.200><c> L1</c><00:01:55.719><c> 2</c><00:01:55.920><c> and</c><00:01:56.119><c> three</c><00:01:56.360><c> caches</c>\\n\\n00:01:56.830 --> 00:01:56.840 align:start position:0%\\ntop of the usual L1 2 and three caches\\n \\n\\n00:01:56.840 --> 00:02:01.789 align:start position:0%\\ntop of the usual L1 2 and three caches\\nto<00:01:57.000><c> boost</c><00:01:57.320><c> performance</c><00:01:57.840><c> even</c><00:01:58.119><c> more</c>\\n\\n00:02:01.789 --> 00:02:01.799 align:start position:0%\\n \\n \\n\\n00:02:01.799 --> 00:02:03.550 align:start position:0%\\n \\nthe<00:02:01.920><c> L1</c><00:02:02.360><c> cach</c><00:02:02.600><c> is</c><00:02:02.719><c> the</c><00:02:02.880><c> smallest</c><00:02:03.280><c> in</c><00:02:03.399><c> the</c>\\n\\n00:02:03.550 --> 00:02:03.560 align:start position:0%\\nthe L1 cach is the smallest in the\\n \\n\\n00:02:03.560 --> 00:02:05.830 align:start position:0%\\nthe L1 cach is the smallest in the\\nhierarchy<00:02:04.280><c> typically</c><00:02:04.719><c> ranging</c><00:02:05.119><c> from</c><00:02:05.360><c> 16</c>\\n\\n00:02:05.830 --> 00:02:05.840 align:start position:0%\\nhierarchy typically ranging from 16\\n \\n\\n00:02:05.840 --> 00:02:09.869 align:start position:0%\\nhierarchy typically ranging from 16\\nkiloby<00:02:06.439><c> to</c><00:02:06.680><c> 128</c><00:02:07.640><c> kilobytes</c><00:02:08.200><c> per</c><00:02:08.599><c> core</c><00:02:09.599><c> it</c><00:02:09.759><c> has</c>\\n\\n00:02:09.869 --> 00:02:09.879 align:start position:0%\\nkiloby to 128 kilobytes per core it has\\n \\n\\n00:02:09.879 --> 00:02:11.830 align:start position:0%\\nkiloby to 128 kilobytes per core it has\\nan<00:02:10.039><c> associativity</c><00:02:10.759><c> of</c><00:02:10.959><c> between</c><00:02:11.319><c> two</c><00:02:11.599><c> and</c>\\n\\n00:02:11.830 --> 00:02:11.840 align:start position:0%\\nan associativity of between two and\\n \\n\\n00:02:11.840 --> 00:02:14.990 align:start position:0%\\nan associativity of between two and\\neight<00:02:12.560><c> ways</c><00:02:13.560><c> it</c><00:02:13.680><c> is</c><00:02:13.879><c> the</c><00:02:14.080><c> fastest</c><00:02:14.519><c> among</c><00:02:14.760><c> all</c>\\n\\n00:02:14.990 --> 00:02:15.000 align:start position:0%\\neight ways it is the fastest among all\\n \\n\\n00:02:15.000 --> 00:02:17.309 align:start position:0%\\neight ways it is the fastest among all\\ncaches<00:02:15.640><c> with</c><00:02:15.800><c> a</c><00:02:15.959><c> latency</c><00:02:16.560><c> in</c><00:02:16.680><c> the</c><00:02:16.800><c> range</c><00:02:17.040><c> of</c><00:02:17.200><c> a</c>\\n\\n00:02:17.309 --> 00:02:17.319 align:start position:0%\\ncaches with a latency in the range of a\\n \\n\\n00:02:17.319 --> 00:02:18.750 align:start position:0%\\ncaches with a latency in the range of a\\nfew<00:02:17.519><c> CPU</c>\\n\\n00:02:18.750 --> 00:02:18.760 align:start position:0%\\nfew CPU\\n \\n\\n00:02:18.760 --> 00:02:21.670 align:start position:0%\\nfew CPU\\nCycles<00:02:19.760><c> L2</c><00:02:20.239><c> caches</c><00:02:20.640><c> are</c><00:02:20.879><c> slightly</c><00:02:21.280><c> larger</c>\\n\\n00:02:21.670 --> 00:02:21.680 align:start position:0%\\nCycles L2 caches are slightly larger\\n \\n\\n00:02:21.680 --> 00:02:25.430 align:start position:0%\\nCycles L2 caches are slightly larger\\nthan<00:02:21.840><c> L1</c><00:02:22.480><c> ranging</c><00:02:22.920><c> from</c><00:02:23.440><c> 256</c><00:02:24.440><c> kiloby</c><00:02:25.040><c> to</c><00:02:25.200><c> 2</c>\\n\\n00:02:25.430 --> 00:02:25.440 align:start position:0%\\nthan L1 ranging from 256 kiloby to 2\\n \\n\\n00:02:25.440 --> 00:02:27.630 align:start position:0%\\nthan L1 ranging from 256 kiloby to 2\\nmegabytes<00:02:25.959><c> per</c><00:02:26.120><c> core</c><00:02:26.640><c> with</c><00:02:26.760><c> older</c><00:02:27.120><c> machines</c>\\n\\n00:02:27.630 --> 00:02:27.640 align:start position:0%\\nmegabytes per core with older machines\\n \\n\\n00:02:27.640 --> 00:02:30.550 align:start position:0%\\nmegabytes per core with older machines\\nhaving<00:02:27.920><c> up</c><00:02:28.040><c> to</c><00:02:28.239><c> several</c><00:02:28.599><c> megabytes</c><00:02:29.120><c> per</c><00:02:29.280><c> core</c>\\n\\n00:02:30.550 --> 00:02:30.560 align:start position:0%\\nhaving up to several megabytes per core\\n \\n\\n00:02:30.560 --> 00:02:33.509 align:start position:0%\\nhaving up to several megabytes per core\\nin<00:02:30.720><c> terms</c><00:02:30.959><c> of</c><00:02:31.280><c> associativity</c><00:02:32.280><c> L2</c><00:02:33.000><c> has</c><00:02:33.200><c> between</c>\\n\\n00:02:33.509 --> 00:02:33.519 align:start position:0%\\nin terms of associativity L2 has between\\n \\n\\n00:02:33.519 --> 00:02:36.430 align:start position:0%\\nin terms of associativity L2 has between\\nfour<00:02:33.760><c> and</c><00:02:33.959><c> 16</c><00:02:34.400><c> ways</c><00:02:35.080><c> and</c><00:02:35.239><c> a</c><00:02:35.400><c> latency</c><00:02:35.879><c> of</c><00:02:36.000><c> 4</c><00:02:36.280><c> to</c>\\n\\n00:02:36.430 --> 00:02:36.440 align:start position:0%\\nfour and 16 ways and a latency of 4 to\\n \\n\\n00:02:36.440 --> 00:02:37.790 align:start position:0%\\nfour and 16 ways and a latency of 4 to\\n10<00:02:36.640><c> CPU</c>\\n\\n00:02:37.790 --> 00:02:37.800 align:start position:0%\\n10 CPU\\n \\n\\n00:02:37.800 --> 00:02:40.750 align:start position:0%\\n10 CPU\\nCycles<00:02:38.800><c> L3</c><00:02:39.319><c> caches</c><00:02:39.720><c> are</c><00:02:39.879><c> the</c><00:02:40.040><c> largest</c><00:02:40.440><c> in</c><00:02:40.599><c> the</c>\\n\\n00:02:40.750 --> 00:02:40.760 align:start position:0%\\nCycles L3 caches are the largest in the\\n \\n\\n00:02:40.760 --> 00:02:42.949 align:start position:0%\\nCycles L3 caches are the largest in the\\nhierarchy<00:02:41.239><c> in</c><00:02:41.400><c> most</c><00:02:41.680><c> architectures</c><00:02:42.560><c> ranging</c>\\n\\n00:02:42.949 --> 00:02:42.959 align:start position:0%\\nhierarchy in most architectures ranging\\n \\n\\n00:02:42.959 --> 00:02:45.949 align:start position:0%\\nhierarchy in most architectures ranging\\nfrom<00:02:43.120><c> 2</c><00:02:43.360><c> mbes</c><00:02:43.879><c> to</c><00:02:44.080><c> 32</c><00:02:44.560><c> mbes</c><00:02:45.040><c> per</c><00:02:45.239><c> core</c><00:02:45.720><c> with</c>\\n\\n00:02:45.949 --> 00:02:45.959 align:start position:0%\\nfrom 2 mbes to 32 mbes per core with\\n \\n\\n00:02:45.959 --> 00:02:48.710 align:start position:0%\\nfrom 2 mbes to 32 mbes per core with\\nsome<00:02:46.200><c> apple</c><00:02:46.680><c> and</c><00:02:46.879><c> AMD</c><00:02:47.400><c> CPUs</c><00:02:48.080><c> having</c><00:02:48.360><c> more</c><00:02:48.560><c> than</c>\\n\\n00:02:48.710 --> 00:02:48.720 align:start position:0%\\nsome apple and AMD CPUs having more than\\n \\n\\n00:02:48.720 --> 00:02:52.350 align:start position:0%\\nsome apple and AMD CPUs having more than\\n32<00:02:49.200><c> MBT</c><00:02:49.680><c> per</c><00:02:50.000><c> core</c><00:02:51.000><c> L3</c><00:02:51.599><c> typically</c><00:02:52.040><c> has</c><00:02:52.159><c> an</c>\\n\\n00:02:52.350 --> 00:02:52.360 align:start position:0%\\n32 MBT per core L3 typically has an\\n \\n\\n00:02:52.360 --> 00:02:55.149 align:start position:0%\\n32 MBT per core L3 typically has an\\nassociativity<00:02:53.239><c> of</c><00:02:53.400><c> 16</c><00:02:53.920><c> ways</c><00:02:54.560><c> though</c><00:02:54.760><c> this</c><00:02:54.920><c> can</c>\\n\\n00:02:55.149 --> 00:02:55.159 align:start position:0%\\nassociativity of 16 ways though this can\\n \\n\\n00:02:55.159 --> 00:02:57.869 align:start position:0%\\nassociativity of 16 ways though this can\\nvary<00:02:55.440><c> between</c><00:02:55.760><c> system</c><00:02:56.560><c> architectures</c><00:02:57.560><c> it</c><00:02:57.720><c> has</c>\\n\\n00:02:57.869 --> 00:02:57.879 align:start position:0%\\nvary between system architectures it has\\n \\n\\n00:02:57.879 --> 00:03:00.070 align:start position:0%\\nvary between system architectures it has\\nthe<00:02:58.000><c> longest</c><00:02:58.360><c> latency</c><00:02:59.120><c> ranging</c><00:02:59.480><c> from</c><00:02:59.640><c> 10</c><00:02:59.840><c> 10</c>\\n\\n00:03:00.070 --> 00:03:00.080 align:start position:0%\\nthe longest latency ranging from 10 10\\n \\n\\n00:03:00.080 --> 00:03:01.750 align:start position:0%\\nthe longest latency ranging from 10 10\\nto<00:03:00.239><c> 40</c>\\n\\n00:03:01.750 --> 00:03:01.760 align:start position:0%\\nto 40\\n \\n\\n00:03:01.760 --> 00:03:04.229 align:start position:0%\\nto 40\\nCycles<00:03:02.760><c> cash</c><00:03:03.040><c> hierarchies</c><00:03:03.879><c> can</c><00:03:04.040><c> be</c>\\n\\n00:03:04.229 --> 00:03:04.239 align:start position:0%\\nCycles cash hierarchies can be\\n \\n\\n00:03:04.239 --> 00:03:06.589 align:start position:0%\\nCycles cash hierarchies can be\\ncategorized<00:03:04.959><c> by</c><00:03:05.120><c> their</c><00:03:05.319><c> inclusion</c><00:03:05.879><c> policies</c>\\n\\n00:03:06.589 --> 00:03:06.599 align:start position:0%\\ncategorized by their inclusion policies\\n \\n\\n00:03:06.599 --> 00:03:08.509 align:start position:0%\\ncategorized by their inclusion policies\\nwhich<00:03:06.840><c> decide</c><00:03:07.360><c> whether</c><00:03:07.560><c> a</c><00:03:07.799><c> data</c><00:03:08.000><c> block</c><00:03:08.360><c> is</c>\\n\\n00:03:08.509 --> 00:03:08.519 align:start position:0%\\nwhich decide whether a data block is\\n \\n\\n00:03:08.519 --> 00:03:10.750 align:start position:0%\\nwhich decide whether a data block is\\nstored<00:03:08.959><c> in</c><00:03:09.159><c> just</c><00:03:09.360><c> one</c><00:03:09.599><c> cach</c><00:03:09.879><c> level</c><00:03:10.400><c> copied</c>\\n\\n00:03:10.750 --> 00:03:10.760 align:start position:0%\\nstored in just one cach level copied\\n \\n\\n00:03:10.760 --> 00:03:12.910 align:start position:0%\\nstored in just one cach level copied\\nacross<00:03:11.080><c> multiple</c><00:03:11.519><c> levels</c><00:03:12.159><c> or</c><00:03:12.360><c> handled</c><00:03:12.720><c> in</c><00:03:12.840><c> a</c>\\n\\n00:03:12.910 --> 00:03:12.920 align:start position:0%\\nacross multiple levels or handled in a\\n \\n\\n00:03:12.920 --> 00:03:15.869 align:start position:0%\\nacross multiple levels or handled in a\\nmore<00:03:13.120><c> flexible</c>\\n\\n00:03:15.869 --> 00:03:15.879 align:start position:0%\\n \\n \\n\\n00:03:15.879 --> 00:03:18.430 align:start position:0%\\n \\nmanner<00:03:16.879><c> the</c><00:03:17.040><c> three</c><00:03:17.239><c> main</c><00:03:17.480><c> inclusion</c><00:03:17.959><c> policies</c>\\n\\n00:03:18.430 --> 00:03:18.440 align:start position:0%\\nmanner the three main inclusion policies\\n \\n\\n00:03:18.440 --> 00:03:21.070 align:start position:0%\\nmanner the three main inclusion policies\\nare<00:03:18.879><c> inclusive</c><00:03:19.879><c> exclusive</c><00:03:20.879><c> and</c>\\n\\n00:03:21.070 --> 00:03:21.080 align:start position:0%\\nare inclusive exclusive and\\n \\n\\n00:03:21.080 --> 00:03:23.990 align:start position:0%\\nare inclusive exclusive and\\nnon-inclusive<00:03:21.840><c> non-exclusive</c><00:03:22.760><c> or</c><00:03:23.000><c> nine</c><00:03:23.480><c> in</c>\\n\\n00:03:23.990 --> 00:03:24.000 align:start position:0%\\nnon-inclusive non-exclusive or nine in\\n \\n\\n00:03:24.000 --> 00:03:26.750 align:start position:0%\\nnon-inclusive non-exclusive or nine in\\nshort<00:03:25.000><c> in</c><00:03:25.120><c> the</c><00:03:25.239><c> inclusive</c><00:03:25.799><c> policy</c><00:03:26.519><c> data</c>\\n\\n00:03:26.750 --> 00:03:26.760 align:start position:0%\\nshort in the inclusive policy data\\n \\n\\n00:03:26.760 --> 00:03:28.670 align:start position:0%\\nshort in the inclusive policy data\\nstored<00:03:27.080><c> in</c><00:03:27.159><c> a</c><00:03:27.319><c> higher</c><00:03:27.599><c> level</c><00:03:27.920><c> cache</c><00:03:28.360><c> such</c><00:03:28.560><c> as</c>\\n\\n00:03:28.670 --> 00:03:28.680 align:start position:0%\\nstored in a higher level cache such as\\n \\n\\n00:03:28.680 --> 00:03:30.429 align:start position:0%\\nstored in a higher level cache such as\\nL1<00:03:29.280><c> which</c><00:03:29.400><c> is</c><00:03:29.519><c> close</c><00:03:29.760><c> closest</c><00:03:30.120><c> to</c><00:03:30.280><c> the</c>\\n\\n00:03:30.429 --> 00:03:30.439 align:start position:0%\\nL1 which is close closest to the\\n \\n\\n00:03:30.439 --> 00:03:32.550 align:start position:0%\\nL1 which is close closest to the\\nprocessor<00:03:30.879><c> core</c><00:03:31.319><c> is</c><00:03:31.519><c> also</c><00:03:31.720><c> stored</c><00:03:32.080><c> in</c><00:03:32.239><c> lower</c>\\n\\n00:03:32.550 --> 00:03:32.560 align:start position:0%\\nprocessor core is also stored in lower\\n \\n\\n00:03:32.560 --> 00:03:35.830 align:start position:0%\\nprocessor core is also stored in lower\\nlevel<00:03:32.840><c> caches</c><00:03:33.319><c> like</c><00:03:33.480><c> L2</c><00:03:34.040><c> and</c><00:03:34.239><c> possibly</c><00:03:34.640><c> L3</c><00:03:35.640><c> in</c>\\n\\n00:03:35.830 --> 00:03:35.840 align:start position:0%\\nlevel caches like L2 and possibly L3 in\\n \\n\\n00:03:35.840 --> 00:03:39.030 align:start position:0%\\nlevel caches like L2 and possibly L3 in\\nthis<00:03:36.080><c> case</c><00:03:36.640><c> you</c><00:03:36.760><c> could</c><00:03:36.959><c> say</c><00:03:37.159><c> that</c><00:03:37.319><c> L2</c><00:03:37.959><c> includes</c>\\n\\n00:03:39.030 --> 00:03:39.040 align:start position:0%\\nthis case you could say that L2 includes\\n \\n\\n00:03:39.040 --> 00:03:42.309 align:start position:0%\\nthis case you could say that L2 includes\\nL1<00:03:40.040><c> the</c><00:03:40.280><c> exclusive</c><00:03:40.879><c> policy</c><00:03:41.560><c> states</c><00:03:42.000><c> that</c><00:03:42.120><c> a</c>\\n\\n00:03:42.309 --> 00:03:42.319 align:start position:0%\\nL1 the exclusive policy states that a\\n \\n\\n00:03:42.319 --> 00:03:44.509 align:start position:0%\\nL1 the exclusive policy states that a\\ndata<00:03:42.560><c> block</c><00:03:43.040><c> can</c><00:03:43.239><c> only</c><00:03:43.599><c> exist</c><00:03:43.840><c> in</c><00:03:44.040><c> one</c><00:03:44.280><c> cach</c>\\n\\n00:03:44.509 --> 00:03:44.519 align:start position:0%\\ndata block can only exist in one cach\\n \\n\\n00:03:44.519 --> 00:03:47.589 align:start position:0%\\ndata block can only exist in one cach\\nlevel<00:03:44.799><c> at</c><00:03:44.920><c> a</c><00:03:45.120><c> time</c><00:03:46.040><c> if</c><00:03:46.159><c> it's</c><00:03:46.319><c> an</c><00:03:46.480><c> L1</c><00:03:47.159><c> it</c><00:03:47.319><c> won't</c>\\n\\n00:03:47.589 --> 00:03:47.599 align:start position:0%\\nlevel at a time if it's an L1 it won't\\n \\n\\n00:03:47.599 --> 00:03:50.990 align:start position:0%\\nlevel at a time if it's an L1 it won't\\nbe<00:03:47.760><c> in</c><00:03:47.920><c> L2</c><00:03:48.360><c> or</c><00:03:48.560><c> L3</c><00:03:49.200><c> and</c><00:03:49.400><c> vice</c><00:03:49.640><c> versa</c><00:03:50.599><c> in</c><00:03:50.799><c> this</c>\\n\\n00:03:50.990 --> 00:03:51.000 align:start position:0%\\nbe in L2 or L3 and vice versa in this\\n \\n\\n00:03:51.000 --> 00:03:53.990 align:start position:0%\\nbe in L2 or L3 and vice versa in this\\ninstance<00:03:51.640><c> L2</c><00:03:52.280><c> is</c><00:03:52.599><c> exclusive</c><00:03:53.120><c> of</c>\\n\\n00:03:53.990 --> 00:03:54.000 align:start position:0%\\ninstance L2 is exclusive of\\n \\n\\n00:03:54.000 --> 00:03:56.750 align:start position:0%\\ninstance L2 is exclusive of\\nL1<00:03:55.000><c> the</c><00:03:55.159><c> non-inclusive</c><00:03:55.920><c> non-exclusive</c>\\n\\n00:03:56.750 --> 00:03:56.760 align:start position:0%\\nL1 the non-inclusive non-exclusive\\n \\n\\n00:03:56.760 --> 00:03:59.550 align:start position:0%\\nL1 the non-inclusive non-exclusive\\npolicy<00:03:57.360><c> is</c><00:03:57.480><c> a</c><00:03:57.680><c> hybrid</c><00:03:58.079><c> of</c><00:03:58.200><c> the</c><00:03:58.360><c> previous</c><00:03:58.720><c> two</c>\\n\\n00:03:59.550 --> 00:03:59.560 align:start position:0%\\npolicy is a hybrid of the previous two\\n \\n\\n00:03:59.560 --> 00:04:01.270 align:start position:0%\\npolicy is a hybrid of the previous two\\nthe<00:03:59.760><c> there</c><00:03:59.840><c> is</c><00:03:59.959><c> no</c><00:04:00.120><c> strict</c><00:04:00.439><c> rule</c><00:04:00.720><c> for</c>\\n\\n00:04:01.270 --> 00:04:01.280 align:start position:0%\\nthe there is no strict rule for\\n \\n\\n00:04:01.280 --> 00:04:03.789 align:start position:0%\\nthe there is no strict rule for\\nduplication<00:04:02.280><c> data</c><00:04:02.640><c> may</c><00:04:02.879><c> or</c><00:04:03.079><c> may</c><00:04:03.239><c> not</c><00:04:03.480><c> exist</c>\\n\\n00:04:03.789 --> 00:04:03.799 align:start position:0%\\nduplication data may or may not exist\\n \\n\\n00:04:03.799 --> 00:04:05.830 align:start position:0%\\nduplication data may or may not exist\\nacross<00:04:04.120><c> multiple</c><00:04:04.560><c> cache</c><00:04:04.840><c> levels</c><00:04:05.439><c> depending</c>\\n\\n00:04:05.830 --> 00:04:05.840 align:start position:0%\\nacross multiple cache levels depending\\n \\n\\n00:04:05.840 --> 00:04:08.910 align:start position:0%\\nacross multiple cache levels depending\\non<00:04:06.000><c> the</c><00:04:06.159><c> systems</c><00:04:07.120><c> design</c><00:04:08.120><c> in</c><00:04:08.319><c> Real</c><00:04:08.599><c> World</c>\\n\\n00:04:08.910 --> 00:04:08.920 align:start position:0%\\non the systems design in Real World\\n \\n\\n00:04:08.920 --> 00:04:11.350 align:start position:0%\\non the systems design in Real World\\nSystems<00:04:09.680><c> CPU</c><00:04:10.159><c> cache</c><00:04:10.400><c> hierarchies</c><00:04:11.000><c> combine</c>\\n\\n00:04:11.350 --> 00:04:11.360 align:start position:0%\\nSystems CPU cache hierarchies combine\\n \\n\\n00:04:11.360 --> 00:04:14.229 align:start position:0%\\nSystems CPU cache hierarchies combine\\ninclusion<00:04:12.000><c> policies</c><00:04:13.000><c> for</c><00:04:13.200><c> example</c><00:04:13.840><c> Intel</c>\\n\\n00:04:14.229 --> 00:04:14.239 align:start position:0%\\ninclusion policies for example Intel\\n \\n\\n00:04:14.239 --> 00:04:16.590 align:start position:0%\\ninclusion policies for example Intel\\nprocessors<00:04:14.799><c> like</c><00:04:15.000><c> sandybridge</c><00:04:15.600><c> ivybridge</c>\\n\\n00:04:16.590 --> 00:04:16.600 align:start position:0%\\nprocessors like sandybridge ivybridge\\n \\n\\n00:04:16.600 --> 00:04:19.310 align:start position:0%\\nprocessors like sandybridge ivybridge\\nand<00:04:16.759><c> Skylake</c><00:04:17.560><c> have</c><00:04:17.720><c> an</c><00:04:17.880><c> inclusive</c><00:04:18.359><c> L3</c><00:04:18.840><c> cache</c>\\n\\n00:04:19.310 --> 00:04:19.320 align:start position:0%\\nand Skylake have an inclusive L3 cache\\n \\n\\n00:04:19.320 --> 00:04:21.510 align:start position:0%\\nand Skylake have an inclusive L3 cache\\nand<00:04:19.440><c> a</c><00:04:19.600><c> non-inclusive</c><00:04:20.320><c> non-exclusive</c><00:04:21.079><c> L2</c>\\n\\n00:04:21.510 --> 00:04:21.520 align:start position:0%\\nand a non-inclusive non-exclusive L2\\n \\n\\n00:04:21.520 --> 00:04:23.909 align:start position:0%\\nand a non-inclusive non-exclusive L2\\ncache<00:04:22.520><c> each</c><00:04:22.680><c> of</c><00:04:22.840><c> these</c><00:04:23.080><c> policies</c><00:04:23.520><c> has</c><00:04:23.680><c> its</c>\\n\\n00:04:23.909 --> 00:04:23.919 align:start position:0%\\ncache each of these policies has its\\n \\n\\n00:04:23.919 --> 00:04:25.749 align:start position:0%\\ncache each of these policies has its\\nbenefits<00:04:24.320><c> and</c><00:04:24.479><c> drawbacks</c><00:04:25.160><c> but</c><00:04:25.280><c> they</c><00:04:25.400><c> all</c><00:04:25.600><c> play</c>\\n\\n00:04:25.749 --> 00:04:25.759 align:start position:0%\\nbenefits and drawbacks but they all play\\n \\n\\n00:04:25.759 --> 00:04:27.629 align:start position:0%\\nbenefits and drawbacks but they all play\\na<00:04:25.880><c> role</c><00:04:26.080><c> in</c><00:04:26.240><c> how</c><00:04:26.479><c> data</c><00:04:26.720><c> is</c><00:04:26.840><c> retrieved</c><00:04:27.440><c> or</c>\\n\\n00:04:27.629 --> 00:04:27.639 align:start position:0%\\na role in how data is retrieved or\\n \\n\\n00:04:27.639 --> 00:04:29.909 align:start position:0%\\na role in how data is retrieved or\\nwritten<00:04:28.120><c> within</c><00:04:28.360><c> the</c><00:04:28.520><c> cash</c><00:04:28.759><c> hierarchy</c><00:04:29.759><c> let's</c>\\n\\n00:04:29.909 --> 00:04:29.919 align:start position:0%\\nwritten within the cash hierarchy let's\\n \\n\\n00:04:29.919 --> 00:04:32.550 align:start position:0%\\nwritten within the cash hierarchy let's\\nlook<00:04:30.080><c> at</c><00:04:30.199><c> an</c><00:04:30.840><c> example</c><00:04:31.840><c> let's</c><00:04:32.080><c> assume</c><00:04:32.320><c> we</c><00:04:32.440><c> have</c>\\n\\n00:04:32.550 --> 00:04:32.560 align:start position:0%\\nlook at an example let's assume we have\\n \\n\\n00:04:32.560 --> 00:04:34.710 align:start position:0%\\nlook at an example let's assume we have\\nan<00:04:32.720><c> inclusive</c><00:04:33.240><c> cache</c><00:04:33.520><c> hierarchy</c><00:04:34.160><c> with</c><00:04:34.320><c> three</c>\\n\\n00:04:34.710 --> 00:04:34.720 align:start position:0%\\nan inclusive cache hierarchy with three\\n \\n\\n00:04:34.720 --> 00:04:37.710 align:start position:0%\\nan inclusive cache hierarchy with three\\nlevels<00:04:35.720><c> a</c><00:04:35.880><c> read</c><00:04:36.199><c> request</c><00:04:36.759><c> will</c><00:04:36.960><c> always</c><00:04:37.280><c> start</c>\\n\\n00:04:37.710 --> 00:04:37.720 align:start position:0%\\nlevels a read request will always start\\n \\n\\n00:04:37.720 --> 00:04:40.550 align:start position:0%\\nlevels a read request will always start\\nat<00:04:37.840><c> the</c><00:04:37.960><c> highest</c><00:04:38.280><c> cache</c><00:04:38.520><c> level</c><00:04:39.240><c> L1</c><00:04:40.240><c> if</c><00:04:40.400><c> the</c>\\n\\n00:04:40.550 --> 00:04:40.560 align:start position:0%\\nat the highest cache level L1 if the\\n \\n\\n00:04:40.560 --> 00:04:42.670 align:start position:0%\\nat the highest cache level L1 if the\\nrequested<00:04:41.039><c> address</c><00:04:41.320><c> is</c><00:04:41.479><c> found</c><00:04:41.720><c> in</c><00:04:41.880><c> L1</c><00:04:42.520><c> the</c>\\n\\n00:04:42.670 --> 00:04:42.680 align:start position:0%\\nrequested address is found in L1 the\\n \\n\\n00:04:42.680 --> 00:04:44.310 align:start position:0%\\nrequested address is found in L1 the\\ndata<00:04:42.919><c> is</c><00:04:43.039><c> simply</c><00:04:43.360><c> forwarded</c><00:04:43.960><c> to</c><00:04:44.120><c> the</c>\\n\\n00:04:44.310 --> 00:04:44.320 align:start position:0%\\ndata is simply forwarded to the\\n \\n\\n00:04:44.320 --> 00:04:47.189 align:start position:0%\\ndata is simply forwarded to the\\nprocessor<00:04:45.120><c> core</c><00:04:46.120><c> if</c><00:04:46.280><c> the</c><00:04:46.440><c> address</c><00:04:46.720><c> is</c><00:04:46.880><c> not</c><00:04:47.039><c> in</c>\\n\\n00:04:47.189 --> 00:04:47.199 align:start position:0%\\nprocessor core if the address is not in\\n \\n\\n00:04:47.199 --> 00:04:49.670 align:start position:0%\\nprocessor core if the address is not in\\nL1<00:04:47.880><c> the</c><00:04:48.000><c> search</c><00:04:48.320><c> moves</c><00:04:48.639><c> to</c>\\n\\n00:04:49.670 --> 00:04:49.680 align:start position:0%\\nL1 the search moves to\\n \\n\\n00:04:49.680 --> 00:04:52.790 align:start position:0%\\nL1 the search moves to\\nL2<00:04:50.680><c> if</c><00:04:50.840><c> the</c><00:04:50.960><c> address</c><00:04:51.280><c> is</c><00:04:51.400><c> found</c><00:04:51.680><c> in</c><00:04:51.800><c> L2</c><00:04:52.639><c> the</c>\\n\\n00:04:52.790 --> 00:04:52.800 align:start position:0%\\nL2 if the address is found in L2 the\\n \\n\\n00:04:52.800 --> 00:04:55.670 align:start position:0%\\nL2 if the address is found in L2 the\\ndata<00:04:53.039><c> is</c><00:04:53.199><c> copied</c><00:04:53.680><c> to</c><00:04:53.800><c> L1</c><00:04:54.639><c> and</c><00:04:54.800><c> then</c><00:04:54.960><c> forwarded</c>\\n\\n00:04:55.670 --> 00:04:55.680 align:start position:0%\\ndata is copied to L1 and then forwarded\\n \\n\\n00:04:55.680 --> 00:04:58.189 align:start position:0%\\ndata is copied to L1 and then forwarded\\nto<00:04:55.840><c> the</c><00:04:56.039><c> processor</c><00:04:56.639><c> core</c><00:04:57.639><c> this</c><00:04:57.800><c> step</c><00:04:58.039><c> is</c>\\n\\n00:04:58.189 --> 00:04:58.199 align:start position:0%\\nto the processor core this step is\\n \\n\\n00:04:58.199 --> 00:05:00.670 align:start position:0%\\nto the processor core this step is\\nimportant<00:04:58.960><c> since</c><00:04:59.199><c> having</c><00:04:59.440><c> the</c><00:04:59.759><c> data</c><00:04:59.960><c> in</c><00:05:00.080><c> L1</c>\\n\\n00:05:00.670 --> 00:05:00.680 align:start position:0%\\nimportant since having the data in L1\\n \\n\\n00:05:00.680 --> 00:05:02.390 align:start position:0%\\nimportant since having the data in L1\\nimproves<00:05:01.120><c> the</c><00:05:01.240><c> heat</c><00:05:01.479><c> rate</c><00:05:01.880><c> if</c><00:05:02.039><c> the</c><00:05:02.160><c> same</c>\\n\\n00:05:02.390 --> 00:05:02.400 align:start position:0%\\nimproves the heat rate if the same\\n \\n\\n00:05:02.400 --> 00:05:04.990 align:start position:0%\\nimproves the heat rate if the same\\naddress<00:05:02.680><c> is</c><00:05:02.919><c> accessed</c><00:05:03.360><c> again</c><00:05:03.720><c> soon</c><00:05:04.720><c> if</c><00:05:04.840><c> the</c>\\n\\n00:05:04.990 --> 00:05:05.000 align:start position:0%\\naddress is accessed again soon if the\\n \\n\\n00:05:05.000 --> 00:05:07.270 align:start position:0%\\naddress is accessed again soon if the\\naddress<00:05:05.320><c> is</c><00:05:05.440><c> not</c><00:05:05.639><c> found</c><00:05:05.840><c> in</c><00:05:06.000><c> L2</c><00:05:06.720><c> the</c><00:05:06.840><c> search</c>\\n\\n00:05:07.270 --> 00:05:07.280 align:start position:0%\\naddress is not found in L2 the search\\n \\n\\n00:05:07.280 --> 00:05:10.430 align:start position:0%\\naddress is not found in L2 the search\\ncontinues<00:05:07.759><c> in</c><00:05:07.880><c> the</c><00:05:08.000><c> largest</c><00:05:08.440><c> cache</c><00:05:09.320><c> L3</c><00:05:10.320><c> the</c>\\n\\n00:05:10.430 --> 00:05:10.440 align:start position:0%\\ncontinues in the largest cache L3 the\\n \\n\\n00:05:10.440 --> 00:05:12.749 align:start position:0%\\ncontinues in the largest cache L3 the\\nsame<00:05:10.680><c> idea</c><00:05:10.960><c> applies</c><00:05:11.400><c> here</c><00:05:12.000><c> if</c><00:05:12.160><c> the</c><00:05:12.320><c> address</c><00:05:12.600><c> is</c>\\n\\n00:05:12.749 --> 00:05:12.759 align:start position:0%\\nsame idea applies here if the address is\\n \\n\\n00:05:12.759 --> 00:05:16.629 align:start position:0%\\nsame idea applies here if the address is\\nfound<00:05:13.080><c> in</c><00:05:13.240><c> L3</c><00:05:13.880><c> it</c><00:05:14.000><c> is</c><00:05:14.199><c> copied</c><00:05:14.600><c> to</c><00:05:14.759><c> L2</c><00:05:15.560><c> then</c><00:05:15.800><c> L1</c>\\n\\n00:05:16.629 --> 00:05:16.639 align:start position:0%\\nfound in L3 it is copied to L2 then L1\\n \\n\\n00:05:16.639 --> 00:05:18.909 align:start position:0%\\nfound in L3 it is copied to L2 then L1\\nand<00:05:16.880><c> finally</c><00:05:17.360><c> forwarded</c><00:05:17.960><c> to</c><00:05:18.080><c> the</c><00:05:18.240><c> processor</c>\\n\\n00:05:18.909 --> 00:05:18.919 align:start position:0%\\nand finally forwarded to the processor\\n \\n\\n00:05:18.919 --> 00:05:21.390 align:start position:0%\\nand finally forwarded to the processor\\ncore<00:05:19.919><c> if</c><00:05:20.039><c> none</c><00:05:20.240><c> of</c><00:05:20.360><c> the</c><00:05:20.479><c> caches</c><00:05:20.880><c> contain</c><00:05:21.240><c> the</c>\\n\\n00:05:21.390 --> 00:05:21.400 align:start position:0%\\ncore if none of the caches contain the\\n \\n\\n00:05:21.400 --> 00:05:24.029 align:start position:0%\\ncore if none of the caches contain the\\naddress<00:05:22.039><c> the</c><00:05:22.160><c> read</c><00:05:22.520><c> request</c><00:05:23.120><c> is</c><00:05:23.240><c> sent</c><00:05:23.680><c> to</c><00:05:23.840><c> main</c>\\n\\n00:05:24.029 --> 00:05:24.039 align:start position:0%\\naddress the read request is sent to main\\n \\n\\n00:05:24.039 --> 00:05:26.309 align:start position:0%\\naddress the read request is sent to main\\nmemory<00:05:24.840><c> the</c><00:05:25.039><c> data</c><00:05:25.280><c> from</c><00:05:25.479><c> Main</c><00:05:25.680><c> memory</c><00:05:26.120><c> is</c>\\n\\n00:05:26.309 --> 00:05:26.319 align:start position:0%\\nmemory the data from Main memory is\\n \\n\\n00:05:26.319 --> 00:05:28.309 align:start position:0%\\nmemory the data from Main memory is\\nretrieved<00:05:27.000><c> and</c><00:05:27.199><c> in</c><00:05:27.360><c> this</c><00:05:27.479><c> fully</c><00:05:27.759><c> inclusive</c>\\n\\n00:05:28.309 --> 00:05:28.319 align:start position:0%\\nretrieved and in this fully inclusive\\n \\n\\n00:05:28.319 --> 00:05:32.270 align:start position:0%\\nretrieved and in this fully inclusive\\nsystem<00:05:28.919><c> it</c><00:05:29.039><c> is</c><00:05:29.199><c> copied</c><00:05:29.720><c> to</c><00:05:29.840><c> L3</c><00:05:30.560><c> L2</c><00:05:31.319><c> and</c><00:05:31.520><c> L1</c>\\n\\n00:05:32.270 --> 00:05:32.280 align:start position:0%\\nsystem it is copied to L3 L2 and L1\\n \\n\\n00:05:32.280 --> 00:05:34.790 align:start position:0%\\nsystem it is copied to L3 L2 and L1\\nbefore<00:05:32.600><c> being</c><00:05:32.840><c> forwarded</c><00:05:33.360><c> to</c><00:05:33.479><c> the</c><00:05:33.680><c> processor</c>\\n\\n00:05:34.790 --> 00:05:34.800 align:start position:0%\\nbefore being forwarded to the processor\\n \\n\\n00:05:34.800 --> 00:05:38.029 align:start position:0%\\nbefore being forwarded to the processor\\ncore<00:05:35.800><c> when</c><00:05:35.960><c> the</c><00:05:36.080><c> CPU</c><00:05:36.479><c> issues</c><00:05:36.759><c> a</c><00:05:36.919><c> right</c><00:05:37.199><c> request</c>\\n\\n00:05:38.029 --> 00:05:38.039 align:start position:0%\\ncore when the CPU issues a right request\\n \\n\\n00:05:38.039 --> 00:05:39.830 align:start position:0%\\ncore when the CPU issues a right request\\nhow<00:05:38.199><c> the</c><00:05:38.360><c> cash</c><00:05:38.639><c> handles</c><00:05:39.000><c> it</c><00:05:39.240><c> depends</c><00:05:39.560><c> on</c><00:05:39.720><c> the</c>\\n\\n00:05:39.830 --> 00:05:39.840 align:start position:0%\\nhow the cash handles it depends on the\\n \\n\\n00:05:39.840 --> 00:05:42.710 align:start position:0%\\nhow the cash handles it depends on the\\nsystem's<00:05:40.280><c> right</c><00:05:40.600><c> policy</c><00:05:41.600><c> for</c><00:05:41.880><c> Simplicity</c>\\n\\n00:05:42.710 --> 00:05:42.720 align:start position:0%\\nsystem's right policy for Simplicity\\n \\n\\n00:05:42.720 --> 00:05:44.510 align:start position:0%\\nsystem's right policy for Simplicity\\nlet's<00:05:42.960><c> assume</c><00:05:43.280><c> all</c><00:05:43.479><c> caches</c><00:05:43.840><c> in</c><00:05:43.960><c> the</c><00:05:44.080><c> hierarchy</c>\\n\\n00:05:44.510 --> 00:05:44.520 align:start position:0%\\nlet's assume all caches in the hierarchy\\n \\n\\n00:05:44.520 --> 00:05:47.189 align:start position:0%\\nlet's assume all caches in the hierarchy\\nuse<00:05:44.800><c> the</c><00:05:44.919><c> same</c><00:05:45.360><c> policy</c><00:05:46.360><c> in</c><00:05:46.479><c> the</c><00:05:46.639><c> right</c><00:05:46.880><c> through</c>\\n\\n00:05:47.189 --> 00:05:47.199 align:start position:0%\\nuse the same policy in the right through\\n \\n\\n00:05:47.199 --> 00:05:49.749 align:start position:0%\\nuse the same policy in the right through\\npolicy<00:05:47.919><c> data</c><00:05:48.199><c> written</c><00:05:48.520><c> to</c><00:05:48.639><c> L1</c><00:05:49.199><c> immediately</c>\\n\\n00:05:49.749 --> 00:05:49.759 align:start position:0%\\npolicy data written to L1 immediately\\n \\n\\n00:05:49.759 --> 00:05:53.670 align:start position:0%\\npolicy data written to L1 immediately\\npropagates<00:05:50.240><c> to</c><00:05:50.400><c> L2</c><00:05:51.160><c> L3</c><00:05:51.919><c> and</c><00:05:52.080><c> Main</c><00:05:52.440><c> memory</c><00:05:53.440><c> this</c>\\n\\n00:05:53.670 --> 00:05:53.680 align:start position:0%\\npropagates to L2 L3 and Main memory this\\n \\n\\n00:05:53.680 --> 00:05:55.510 align:start position:0%\\npropagates to L2 L3 and Main memory this\\nensures<00:05:54.080><c> all</c><00:05:54.240><c> levels</c><00:05:54.720><c> remain</c><00:05:54.919><c> synchronized</c>\\n\\n00:05:55.510 --> 00:05:55.520 align:start position:0%\\nensures all levels remain synchronized\\n \\n\\n00:05:55.520 --> 00:05:57.110 align:start position:0%\\nensures all levels remain synchronized\\nduring<00:05:55.720><c> a</c><00:05:55.919><c> right</c>\\n\\n00:05:57.110 --> 00:05:57.120 align:start position:0%\\nduring a right\\n \\n\\n00:05:57.120 --> 00:05:59.710 align:start position:0%\\nduring a right\\noperation<00:05:58.120><c> in</c><00:05:58.319><c> contrast</c><00:05:58.960><c> the</c><00:05:59.120><c> right</c><00:05:59.319><c> back</c>\\n\\n00:05:59.710 --> 00:05:59.720 align:start position:0%\\noperation in contrast the right back\\n \\n\\n00:05:59.720 --> 00:06:01.950 align:start position:0%\\noperation in contrast the right back\\npolicy<00:06:00.199><c> delays</c><00:06:00.680><c> updates</c><00:06:01.080><c> to</c><00:06:01.240><c> lower</c><00:06:01.520><c> levels</c><00:06:01.800><c> of</c>\\n\\n00:06:01.950 --> 00:06:01.960 align:start position:0%\\npolicy delays updates to lower levels of\\n \\n\\n00:06:01.960 --> 00:06:04.150 align:start position:0%\\npolicy delays updates to lower levels of\\nthe<00:06:02.280><c> hierarchy</c><00:06:03.280><c> if</c><00:06:03.400><c> a</c><00:06:03.560><c> data</c><00:06:03.759><c> block</c><00:06:04.000><c> is</c>\\n\\n00:06:04.150 --> 00:06:04.160 align:start position:0%\\nthe hierarchy if a data block is\\n \\n\\n00:06:04.160 --> 00:06:07.070 align:start position:0%\\nthe hierarchy if a data block is\\nmodified<00:06:04.600><c> in</c><00:06:04.759><c> L1</c><00:06:05.440><c> it</c><00:06:05.560><c> is</c><00:06:05.720><c> marked</c><00:06:06.039><c> as</c><00:06:06.199><c> dirty</c><00:06:06.919><c> the</c>\\n\\n00:06:07.070 --> 00:06:07.080 align:start position:0%\\nmodified in L1 it is marked as dirty the\\n \\n\\n00:06:07.080 --> 00:06:09.390 align:start position:0%\\nmodified in L1 it is marked as dirty the\\nupdate<00:06:07.440><c> to</c><00:06:07.639><c> lower</c><00:06:07.960><c> caches</c><00:06:08.360><c> or</c><00:06:08.560><c> main</c><00:06:08.840><c> memory</c>\\n\\n00:06:09.390 --> 00:06:09.400 align:start position:0%\\nupdate to lower caches or main memory\\n \\n\\n00:06:09.400 --> 00:06:10.990 align:start position:0%\\nupdate to lower caches or main memory\\nonly<00:06:09.680><c> occurs</c><00:06:10.080><c> when</c><00:06:10.240><c> the</c><00:06:10.400><c> data</c><00:06:10.639><c> block</c><00:06:10.880><c> is</c>\\n\\n00:06:10.990 --> 00:06:11.000 align:start position:0%\\nonly occurs when the data block is\\n \\n\\n00:06:11.000 --> 00:06:14.270 align:start position:0%\\nonly occurs when the data block is\\nevicted<00:06:11.400><c> from</c><00:06:11.759><c> L1</c><00:06:12.759><c> for</c><00:06:13.000><c> example</c><00:06:13.639><c> when</c><00:06:13.800><c> a</c><00:06:13.960><c> dirty</c>\\n\\n00:06:14.270 --> 00:06:14.280 align:start position:0%\\nevicted from L1 for example when a dirty\\n \\n\\n00:06:14.280 --> 00:06:16.430 align:start position:0%\\nevicted from L1 for example when a dirty\\nblock<00:06:14.520><c> is</c><00:06:14.680><c> evicted</c><00:06:15.039><c> from</c><00:06:15.199><c> L1</c><00:06:15.880><c> it</c><00:06:16.000><c> is</c><00:06:16.120><c> written</c>\\n\\n00:06:16.430 --> 00:06:16.440 align:start position:0%\\nblock is evicted from L1 it is written\\n \\n\\n00:06:16.440 --> 00:06:18.710 align:start position:0%\\nblock is evicted from L1 it is written\\nto<00:06:16.599><c> L2</c><00:06:17.240><c> where</c><00:06:17.400><c> it</c><00:06:17.520><c> will</c><00:06:17.759><c> also</c><00:06:18.039><c> be</c><00:06:18.160><c> marked</c><00:06:18.520><c> as</c>\\n\\n00:06:18.710 --> 00:06:18.720 align:start position:0%\\nto L2 where it will also be marked as\\n \\n\\n00:06:18.720 --> 00:06:22.230 align:start position:0%\\nto L2 where it will also be marked as\\ndirty<00:06:19.240><c> waiting</c><00:06:19.639><c> eviction</c><00:06:20.160><c> to</c><00:06:20.360><c> the</c><00:06:20.520><c> next</c><00:06:21.240><c> level</c>\\n\\n00:06:22.230 --> 00:06:22.240 align:start position:0%\\ndirty waiting eviction to the next level\\n \\n\\n00:06:22.240 --> 00:06:24.110 align:start position:0%\\ndirty waiting eviction to the next level\\nright<00:06:22.520><c> misses</c><00:06:22.880><c> are</c><00:06:23.080><c> handled</c><00:06:23.639><c> based</c><00:06:23.880><c> on</c><00:06:23.960><c> the</c>\\n\\n00:06:24.110 --> 00:06:24.120 align:start position:0%\\nright misses are handled based on the\\n \\n\\n00:06:24.120 --> 00:06:27.150 align:start position:0%\\nright misses are handled based on the\\nCash's<00:06:24.479><c> allocation</c><00:06:25.160><c> policy</c><00:06:26.120><c> WR</c><00:06:26.440><c> allocate</c>\\n\\n00:06:27.150 --> 00:06:27.160 align:start position:0%\\nCash's allocation policy WR allocate\\n \\n\\n00:06:27.160 --> 00:06:29.189 align:start position:0%\\nCash's allocation policy WR allocate\\nures<00:06:27.720><c> data</c><00:06:27.960><c> blocks</c><00:06:28.280><c> are</c><00:06:28.479><c> brought</c><00:06:28.800><c> into</c><00:06:29.080><c> the</c>\\n\\n00:06:29.189 --> 00:06:29.199 align:start position:0%\\nures data blocks are brought into the\\n \\n\\n00:06:29.199 --> 00:06:31.670 align:start position:0%\\nures data blocks are brought into the\\ncash<00:06:29.599><c> hierarchy</c><00:06:30.039><c> on</c><00:06:30.160><c> a</c><00:06:30.360><c> miss</c><00:06:30.800><c> and</c><00:06:31.039><c> updated</c>\\n\\n00:06:31.670 --> 00:06:31.680 align:start position:0%\\ncash hierarchy on a miss and updated\\n \\n\\n00:06:31.680 --> 00:06:33.870 align:start position:0%\\ncash hierarchy on a miss and updated\\nthere<00:06:32.039><c> while</c><00:06:32.280><c> with</c><00:06:32.440><c> no</c><00:06:32.680><c> right</c><00:06:33.039><c> allocate</c><00:06:33.720><c> the</c>\\n\\n00:06:33.870 --> 00:06:33.880 align:start position:0%\\nthere while with no right allocate the\\n \\n\\n00:06:33.880 --> 00:06:35.990 align:start position:0%\\nthere while with no right allocate the\\ncach<00:06:34.080><c> is</c><00:06:34.280><c> bypassed</c><00:06:35.000><c> and</c><00:06:35.120><c> the</c><00:06:35.280><c> data</c><00:06:35.520><c> is</c><00:06:35.599><c> written</c>\\n\\n00:06:35.990 --> 00:06:36.000 align:start position:0%\\ncach is bypassed and the data is written\\n \\n\\n00:06:36.000 --> 00:06:38.469 align:start position:0%\\ncach is bypassed and the data is written\\ndirectly<00:06:36.360><c> to</c><00:06:36.520><c> the</c><00:06:36.680><c> next</c><00:06:36.919><c> level</c><00:06:37.880><c> if</c><00:06:38.039><c> all</c><00:06:38.240><c> cash</c>\\n\\n00:06:38.469 --> 00:06:38.479 align:start position:0%\\ndirectly to the next level if all cash\\n \\n\\n00:06:38.479 --> 00:06:40.110 align:start position:0%\\ndirectly to the next level if all cash\\nlevels<00:06:38.759><c> are</c><00:06:38.960><c> configured</c><00:06:39.440><c> as</c><00:06:39.599><c> no</c><00:06:39.880><c> right</c>\\n\\n00:06:40.110 --> 00:06:40.120 align:start position:0%\\nlevels are configured as no right\\n \\n\\n00:06:40.120 --> 00:06:42.230 align:start position:0%\\nlevels are configured as no right\\nallocate<00:06:40.960><c> data</c><00:06:41.199><c> is</c><00:06:41.319><c> written</c><00:06:41.680><c> directly</c><00:06:42.080><c> to</c>\\n\\n00:06:42.230 --> 00:06:42.240 align:start position:0%\\nallocate data is written directly to\\n \\n\\n00:06:42.240 --> 00:06:42.990 align:start position:0%\\nallocate data is written directly to\\nmain\\n\\n00:06:42.990 --> 00:06:43.000 align:start position:0%\\nmain\\n \\n\\n00:06:43.000 --> 00:06:45.029 align:start position:0%\\nmain\\nmemory<00:06:44.000><c> I</c><00:06:44.120><c> hope</c><00:06:44.280><c> you</c><00:06:44.360><c> found</c><00:06:44.599><c> this</c><00:06:44.800><c> video</c>\\n\\n00:06:45.029 --> 00:06:45.039 align:start position:0%\\nmemory I hope you found this video\\n \\n\\n00:06:45.039 --> 00:06:47.629 align:start position:0%\\nmemory I hope you found this video\\nhelpful<00:06:45.800><c> if</c><00:06:45.919><c> you</c><00:06:46.080><c> did</c><00:06:46.479><c> click</c><00:06:46.759><c> the</c><00:06:46.919><c> like</c><00:06:47.120><c> button</c>\\n\\n00:06:47.629 --> 00:06:47.639 align:start position:0%\\nhelpful if you did click the like button\\n \\n\\n00:06:47.639 --> 00:06:49.350 align:start position:0%\\nhelpful if you did click the like button\\nand<00:06:47.840><c> subscribe</c><00:06:48.319><c> for</c><00:06:48.479><c> more</c><00:06:48.680><c> videos</c><00:06:49.000><c> like</c><00:06:49.199><c> this</c>\\n\\n00:06:49.350 --> 00:06:49.360 align:start position:0%\\nand subscribe for more videos like this\\n \\n\\n00:06:49.360 --> 00:06:51.230 align:start position:0%\\nand subscribe for more videos like this\\none<00:06:49.880><c> thanks</c><00:06:50.120><c> for</c><00:06:50.319><c> watching</c><00:06:50.759><c> I'll</c><00:06:50.919><c> see</c><00:06:51.120><c> you</c>\\n\\n00:06:51.230 --> 00:06:51.240 align:start position:0%\\none thanks for watching I'll see you\\n \\n\\n00:06:51.240 --> 00:06:54.000 align:start position:0%\\none thanks for watching I'll see you\\nsoon\\n\\n\",\"file_type\":\"Srt\"}}]", "[{\"file_name\":{\"Windows\":[84,104,101,32,65,110,97,116,111,109,121,32,111,102,32,97,32,77,111,100,101,114,110,32,67,80,85,32,67,97,99,104,101,32,72,105,101,114,97,114,99,104,121]},\"contents\":\"did you know that accessing main memory can take hundreds of CPU Cycles the processor operates at a very high speed but every time it needs to fetch data for main memory it's forced to wait until the requested data is retrieved this huge delay is why computers have caches to keep the data the CPU needs closer and minimize those costly interruptions modern CPUs feature a hierarchial cache system where the cache closest to the processor core is the smallest in fastest while the furthest cache is the largest but slowest large caches are inherently more complex which increases their access times so to maximize performance while reducing latency and cost the first level of cache known as L1 is designed to be very small to match the speed of the processor L1 caches are typically divided into two separate components one optimized for data fetching and another for storing instructions at this point the size of the cache becomes a limiting factor so to solve this many CPU architectures incorporate an additional cache that is larger in size but works at lower speeds this is known as L2 cache the L2 cache is usually a unified cache which means it can store both data and instructions it is dedicated to a single processor core and can directly communicate with the L1 caches but most modern systems are multi-core systems and need a fast way to share data between them that's why CPUs usually have another cache L3 this cache is larger but slower than L2 it serves two main purposes it allows data sharing between processor cores without accessing main memory and it provides an additional layer in the memory hierarchy when both L1 and L2 caches miss the L3 cache is checked before resorting to main memory some specialized systems add an L4 cache on top of the usual L1 2 and three caches the L1 cach is the smallest in the hierarchy typically ranging from 16 kiloby to 128 kilobytes per core it has an associativity of between two and eight ways it is the fastest among all caches with a latency in the range of a few CPU Cycles L2 caches are slightly larger than L1 ranging from 256 kiloby to 2 megabytes per core with older machines having up to several megabytes per core in terms of associativity L2 has between four and 16 ways and a latency of 4 to 10 CPU Cycles L3 caches are the largest in the hierarchy in most architectures ranging from 2 mbes to 32 mbes per core with some apple and AMD CPUs having more than 32 MBT per core L3 typically has an associativity of 16 ways though this can vary between system architectures it has the longest latency ranging from 10 10 to 40 Cycles cash hierarchies can be categorized by their inclusion policies which decide whether a data block is stored in just one cach level copied across multiple levels or handled in a manner the three main inclusion policies are inclusive exclusive and non-inclusive non-exclusive or nine in short in the inclusive policy data stored in a higher level cache such as L1 which is close closest to the processor core is also stored in lower level caches like L2 and possibly L3 in this case you could say that L2 includes L1 the exclusive policy states that a data block can only exist in one cach level at a time if it's an L1 it won't be in L2 or L3 and vice versa in this instance L2 is exclusive of L1 the non-inclusive non-exclusive policy is a hybrid of the previous two the there is no strict rule for duplication data may or may not exist across multiple cache levels depending on the systems design in Real World Systems CPU cache hierarchies combine inclusion policies for example Intel processors like sandybridge ivybridge and Skylake have an inclusive L3 cache and a non-inclusive non-exclusive L2 cache each of these policies has its benefits and drawbacks but they all play a role in how data is retrieved or written within the cash hierarchy let's look at an example let's assume we have an inclusive cache hierarchy with three levels a read request will always start at the highest cache level L1 if the requested address is found in L1 the data is simply forwarded to the processor core if the address is not in L1 the search moves to L2 if the address is found in L2 the data is copied to L1 and then forwarded to the processor core this step is important since having the data in L1 improves the heat rate if the same address is accessed again soon if the address is not found in L2 the search continues in the largest cache L3 the same idea applies here if the address is found in L3 it is copied to L2 then L1 and finally forwarded to the processor core if none of the caches contain the address the read request is sent to main memory the data from Main memory is retrieved and in this fully inclusive system it is copied to L3 L2 and L1 before being forwarded to the processor core when the CPU issues a right request how the cash handles it depends on the system's right policy for Simplicity let's assume all caches in the hierarchy use the same policy in the right through policy data written to L1 immediately propagates to L2 L3 and Main memory this ensures all levels remain synchronized during a right operation in contrast the right back policy delays updates to lower levels of the hierarchy if a data block is modified in L1 it is marked as dirty the update to lower caches or main memory only occurs when the data block is evicted from L1 for example when a dirty block is evicted from L1 it is written to L2 where it will also be marked as dirty waiting eviction to the next level right misses are handled based on the Cash's allocation policy WR allocate ures data blocks are brought into the cash hierarchy on a miss and updated there while with no right allocate the cach is bypassed and the data is written directly to the next level if all cash levels are configured as no right allocate data is written directly to main memory I hope you found this video helpful if you did click the like button and subscribe for more videos like this one thanks for watching I'll see you soon\",\"file_type\":\"Text\"}]")]
    #[case("[{\"StringFile\":{\"file_name\":{\"Windows\":[119,104,121,32,114,117,115,116,32,108,105,98,114,97,114,105,101,115,32,109,97,121,32,110,101,118,101,114,32,101,120,105,115,116,46,32,91,55,54,57,86,113,78,117,112,50,49,81,93,46,101,110]},\"contents\":\"WEBVTT\\nKind: captions\\nLanguage: en\\n\\n00:00:00.040 --> 00:00:02.350 align:start position:0%\\n \\nrust<00:00:00.359><c> libraries</c><00:00:00.880><c> may</c><00:00:01.120><c> never</c><00:00:01.480><c> exist</c><00:00:01.959><c> and</c><00:00:02.240><c> it's</c>\\n\\n00:00:02.350 --> 00:00:02.360 align:start position:0%\\nrust libraries may never exist and it's\\n \\n\\n00:00:02.360 --> 00:00:04.030 align:start position:0%\\nrust libraries may never exist and it's\\nfor<00:00:02.560><c> this</c><00:00:02.800><c> exact</c><00:00:03.199><c> reason</c><00:00:03.639><c> that</c><00:00:03.800><c> when</c><00:00:03.919><c> you</c>\\n\\n00:00:04.030 --> 00:00:04.040 align:start position:0%\\nfor this exact reason that when you\\n \\n\\n00:00:04.040 --> 00:00:05.510 align:start position:0%\\nfor this exact reason that when you\\nbuild<00:00:04.359><c> anything</c><00:00:04.600><c> in</c><00:00:04.759><c> Rust</c><00:00:05.120><c> you</c><00:00:05.240><c> need</c><00:00:05.359><c> to</c>\\n\\n00:00:05.510 --> 00:00:05.520 align:start position:0%\\nbuild anything in Rust you need to\\n \\n\\n00:00:05.520 --> 00:00:07.869 align:start position:0%\\nbuild anything in Rust you need to\\ndownload<00:00:06.000><c> like</c><00:00:06.240><c> a</c><00:00:06.440><c> thousand</c><00:00:06.839><c> crates</c><00:00:07.200><c> in</c><00:00:07.399><c> cargo</c>\\n\\n00:00:07.869 --> 00:00:07.879 align:start position:0%\\ndownload like a thousand crates in cargo\\n \\n\\n00:00:07.879 --> 00:00:10.310 align:start position:0%\\ndownload like a thousand crates in cargo\\nand<00:00:08.080><c> spend</c><00:00:08.400><c> the</c><00:00:08.559><c> next</c><00:00:09.080><c> decade</c><00:00:09.519><c> of</c><00:00:09.679><c> your</c><00:00:09.920><c> life</c>\\n\\n00:00:10.310 --> 00:00:10.320 align:start position:0%\\nand spend the next decade of your life\\n \\n\\n00:00:10.320 --> 00:00:12.629 align:start position:0%\\nand spend the next decade of your life\\ncompiling<00:00:10.960><c> your</c><00:00:11.240><c> project</c><00:00:11.799><c> now</c><00:00:12.080><c> the</c><00:00:12.240><c> rabbit</c>\\n\\n00:00:12.629 --> 00:00:12.639 align:start position:0%\\ncompiling your project now the rabbit\\n \\n\\n00:00:12.639 --> 00:00:14.789 align:start position:0%\\ncompiling your project now the rabbit\\nhole<00:00:13.000><c> on</c><00:00:13.200><c> this</c><00:00:13.320><c> one</c><00:00:13.639><c> goes</c><00:00:14.000><c> deep</c><00:00:14.360><c> so</c><00:00:14.559><c> stick</c>\\n\\n00:00:14.789 --> 00:00:14.799 align:start position:0%\\nhole on this one goes deep so stick\\n \\n\\n00:00:14.799 --> 00:00:16.830 align:start position:0%\\nhole on this one goes deep so stick\\naround<00:00:15.040><c> until</c><00:00:15.280><c> the</c><00:00:15.360><c> end</c><00:00:15.799><c> I'm</c><00:00:16.000><c> lowle</c><00:00:16.400><c> learning</c>\\n\\n00:00:16.830 --> 00:00:16.840 align:start position:0%\\naround until the end I'm lowle learning\\n \\n\\n00:00:16.840 --> 00:00:18.870 align:start position:0%\\naround until the end I'm lowle learning\\nI<00:00:16.920><c> make</c><00:00:17.199><c> videos</c><00:00:17.600><c> on</c><00:00:17.840><c> YouTube</c><00:00:18.520><c> about</c>\\n\\n00:00:18.870 --> 00:00:18.880 align:start position:0%\\nI make videos on YouTube about\\n \\n\\n00:00:18.880 --> 00:00:21.269 align:start position:0%\\nI make videos on YouTube about\\nprogramming<00:00:19.480><c> and</c><00:00:19.800><c> software</c><00:00:20.359><c> security</c><00:00:21.080><c> Now</c>\\n\\n00:00:21.269 --> 00:00:21.279 align:start position:0%\\nprogramming and software security Now\\n \\n\\n00:00:21.279 --> 00:00:23.109 align:start position:0%\\nprogramming and software security Now\\nrust<00:00:21.720><c> is</c><00:00:21.840><c> one</c><00:00:21.960><c> of</c><00:00:22.080><c> my</c><00:00:22.359><c> favorite</c><00:00:22.720><c> programming</c>\\n\\n00:00:23.109 --> 00:00:23.119 align:start position:0%\\nrust is one of my favorite programming\\n \\n\\n00:00:23.119 --> 00:00:25.230 align:start position:0%\\nrust is one of my favorite programming\\nlanguages<00:00:23.680><c> I'm</c><00:00:23.840><c> a</c><00:00:24.000><c> security</c><00:00:24.320><c> researcher</c><00:00:25.000><c> and</c>\\n\\n00:00:25.230 --> 00:00:25.240 align:start position:0%\\nlanguages I'm a security researcher and\\n \\n\\n00:00:25.240 --> 00:00:27.269 align:start position:0%\\nlanguages I'm a security researcher and\\nI<00:00:25.519><c> honestly</c><00:00:25.960><c> believe</c><00:00:26.400><c> that</c><00:00:26.599><c> the</c><00:00:26.720><c> features</c><00:00:27.080><c> in</c>\\n\\n00:00:27.269 --> 00:00:27.279 align:start position:0%\\nI honestly believe that the features in\\n \\n\\n00:00:27.279 --> 00:00:28.910 align:start position:0%\\nI honestly believe that the features in\\nRust<00:00:27.679><c> like</c><00:00:27.840><c> the</c><00:00:27.920><c> borrow</c><00:00:28.279><c> Checker</c><00:00:28.679><c> and</c><00:00:28.800><c> the</c>\\n\\n00:00:28.910 --> 00:00:28.920 align:start position:0%\\nRust like the borrow Checker and the\\n \\n\\n00:00:28.920 --> 00:00:31.550 align:start position:0%\\nRust like the borrow Checker and the\\nruntime<00:00:29.480><c> access</c><00:00:30.000><c> checks</c><00:00:30.320><c> will</c><00:00:30.599><c> Usher</c><00:00:30.960><c> in</c><00:00:31.279><c> a</c>\\n\\n00:00:31.550 --> 00:00:31.560 align:start position:0%\\nruntime access checks will Usher in a\\n \\n\\n00:00:31.560 --> 00:00:34.670 align:start position:0%\\nruntime access checks will Usher in a\\nnew<00:00:32.040><c> era</c><00:00:32.439><c> of</c><00:00:32.599><c> safer</c><00:00:33.040><c> software</c><00:00:33.719><c> every</c><00:00:34.200><c> major</c>\\n\\n00:00:34.670 --> 00:00:34.680 align:start position:0%\\nnew era of safer software every major\\n \\n\\n00:00:34.680 --> 00:00:36.869 align:start position:0%\\nnew era of safer software every major\\nsystem<00:00:35.000><c> in</c><00:00:35.079><c> the</c><00:00:35.200><c> world</c><00:00:35.520><c> is</c><00:00:35.719><c> written</c><00:00:36.200><c> in</c><00:00:36.360><c> the</c><00:00:36.520><c> C</c>\\n\\n00:00:36.869 --> 00:00:36.879 align:start position:0%\\nsystem in the world is written in the C\\n \\n\\n00:00:36.879 --> 00:00:38.389 align:start position:0%\\nsystem in the world is written in the C\\nlanguage<00:00:37.320><c> that's</c><00:00:37.480><c> the</c><00:00:37.600><c> Linux</c><00:00:37.960><c> kernel</c><00:00:38.200><c> and</c><00:00:38.320><c> a</c>\\n\\n00:00:38.389 --> 00:00:38.399 align:start position:0%\\nlanguage that's the Linux kernel and a\\n \\n\\n00:00:38.399 --> 00:00:39.950 align:start position:0%\\nlanguage that's the Linux kernel and a\\nbunch<00:00:38.559><c> of</c><00:00:38.719><c> other</c><00:00:39.079><c> really</c><00:00:39.360><c> foundational</c>\\n\\n00:00:39.950 --> 00:00:39.960 align:start position:0%\\nbunch of other really foundational\\n \\n\\n00:00:39.960 --> 00:00:42.670 align:start position:0%\\nbunch of other really foundational\\nsoftware<00:00:40.680><c> and</c><00:00:40.840><c> while</c><00:00:41.120><c> C</c><00:00:41.559><c> is</c><00:00:41.719><c> extremely</c><00:00:42.280><c> fast</c>\\n\\n00:00:42.670 --> 00:00:42.680 align:start position:0%\\nsoftware and while C is extremely fast\\n \\n\\n00:00:42.680 --> 00:00:44.709 align:start position:0%\\nsoftware and while C is extremely fast\\nthe<00:00:42.800><c> language</c><00:00:43.160><c> offers</c><00:00:43.559><c> programmers</c><00:00:44.200><c> too</c><00:00:44.399><c> many</c>\\n\\n00:00:44.709 --> 00:00:44.719 align:start position:0%\\nthe language offers programmers too many\\n \\n\\n00:00:44.719 --> 00:00:46.709 align:start position:0%\\nthe language offers programmers too many\\nopportunities<00:00:45.280><c> to</c><00:00:45.440><c> shoot</c><00:00:45.879><c> themselves</c><00:00:46.360><c> in</c><00:00:46.520><c> the</c>\\n\\n00:00:46.709 --> 00:00:46.719 align:start position:0%\\nopportunities to shoot themselves in the\\n \\n\\n00:00:46.719 --> 00:00:49.229 align:start position:0%\\nopportunities to shoot themselves in the\\nface<00:00:47.079><c> from</c><00:00:47.399><c> a</c><00:00:47.600><c> security</c><00:00:48.079><c> standpoint</c><00:00:48.840><c> and</c>\\n\\n00:00:49.229 --> 00:00:49.239 align:start position:0%\\nface from a security standpoint and\\n \\n\\n00:00:49.239 --> 00:00:51.910 align:start position:0%\\nface from a security standpoint and\\ndespite<00:00:49.719><c> the</c><00:00:49.960><c> dozens</c><00:00:50.520><c> of</c><00:00:50.960><c> skill</c><00:00:51.480><c> issue</c>\\n\\n00:00:51.910 --> 00:00:51.920 align:start position:0%\\ndespite the dozens of skill issue\\n \\n\\n00:00:51.920 --> 00:00:54.510 align:start position:0%\\ndespite the dozens of skill issue\\narguments<00:00:52.760><c> and</c><00:00:53.000><c> the</c><00:00:53.280><c> dozens</c><00:00:53.760><c> of</c><00:00:54.079><c> security</c>\\n\\n00:00:54.510 --> 00:00:54.520 align:start position:0%\\narguments and the dozens of security\\n \\n\\n00:00:54.520 --> 00:00:56.470 align:start position:0%\\narguments and the dozens of security\\nfeatures<00:00:54.879><c> that</c><00:00:55.000><c> seem</c><00:00:55.199><c> to</c><00:00:55.320><c> get</c><00:00:55.520><c> added</c><00:00:55.920><c> to</c><00:00:56.039><c> the</c><00:00:56.160><c> C</c>\\n\\n00:00:56.470 --> 00:00:56.480 align:start position:0%\\nfeatures that seem to get added to the C\\n \\n\\n00:00:56.480 --> 00:00:58.389 align:start position:0%\\nfeatures that seem to get added to the C\\nlanguage<00:00:56.879><c> and</c><00:00:57.039><c> the</c><00:00:57.120><c> C</c><00:00:57.399><c> standard</c><00:00:57.800><c> libraries</c><00:00:58.280><c> on</c>\\n\\n00:00:58.389 --> 00:00:58.399 align:start position:0%\\nlanguage and the C standard libraries on\\n \\n\\n00:00:58.399 --> 00:01:01.630 align:start position:0%\\nlanguage and the C standard libraries on\\na<00:00:58.519><c> daily</c><00:00:58.879><c> basis</c><00:00:59.480><c> still</c><00:01:00.039><c> remains</c><00:01:00.359><c> that</c><00:01:00.640><c> 70%</c><00:01:01.480><c> of</c>\\n\\n00:01:01.630 --> 00:01:01.640 align:start position:0%\\na daily basis still remains that 70% of\\n \\n\\n00:01:01.640 --> 00:01:03.830 align:start position:0%\\na daily basis still remains that 70% of\\nsecurity<00:01:02.000><c> vulnerabilities</c><00:01:02.879><c> originate</c><00:01:03.519><c> from</c>\\n\\n00:01:03.830 --> 00:01:03.840 align:start position:0%\\nsecurity vulnerabilities originate from\\n \\n\\n00:01:03.840 --> 00:01:06.469 align:start position:0%\\nsecurity vulnerabilities originate from\\nmemory<00:01:04.280><c> issues</c><00:01:04.720><c> in</c><00:01:04.920><c> C</c><00:01:05.439><c> but</c><00:01:05.720><c> at</c><00:01:05.840><c> the</c><00:01:05.960><c> same</c><00:01:06.200><c> time</c>\\n\\n00:01:06.469 --> 00:01:06.479 align:start position:0%\\nmemory issues in C but at the same time\\n \\n\\n00:01:06.479 --> 00:01:08.749 align:start position:0%\\nmemory issues in C but at the same time\\nI<00:01:06.560><c> completely</c><00:01:06.960><c> acknowledge</c><00:01:07.600><c> that</c><00:01:07.920><c> rust</c><00:01:08.439><c> isn't</c>\\n\\n00:01:08.749 --> 00:01:08.759 align:start position:0%\\nI completely acknowledge that rust isn't\\n \\n\\n00:01:08.759 --> 00:01:10.350 align:start position:0%\\nI completely acknowledge that rust isn't\\nthe<00:01:08.880><c> most</c><00:01:09.080><c> straightforward</c><00:01:09.759><c> language</c><00:01:10.200><c> to</c>\\n\\n00:01:10.350 --> 00:01:10.360 align:start position:0%\\nthe most straightforward language to\\n \\n\\n00:01:10.360 --> 00:01:12.870 align:start position:0%\\nthe most straightforward language to\\nlearn<00:01:10.640><c> with</c><00:01:11.040><c> the</c><00:01:11.200><c> syntax</c><00:01:11.840><c> is</c><00:01:12.000><c> a</c><00:01:12.119><c> little</c><00:01:12.320><c> messy</c>\\n\\n00:01:12.870 --> 00:01:12.880 align:start position:0%\\nlearn with the syntax is a little messy\\n \\n\\n00:01:12.880 --> 00:01:15.030 align:start position:0%\\nlearn with the syntax is a little messy\\nand<00:01:13.280><c> sometimes</c><00:01:13.560><c> the</c><00:01:13.759><c> compiler</c><00:01:14.320><c> gets</c><00:01:14.640><c> mad</c><00:01:14.880><c> at</c>\\n\\n00:01:15.030 --> 00:01:15.040 align:start position:0%\\nand sometimes the compiler gets mad at\\n \\n\\n00:01:15.040 --> 00:01:17.789 align:start position:0%\\nand sometimes the compiler gets mad at\\nyou<00:01:15.479><c> and</c><00:01:15.759><c> then</c><00:01:16.119><c> the</c><00:01:16.280><c> compile</c><00:01:16.720><c> time</c><00:01:17.040><c> takes</c>\\n\\n00:01:17.789 --> 00:01:17.799 align:start position:0%\\nyou and then the compile time takes\\n \\n\\n00:01:17.799 --> 00:01:21.270 align:start position:0%\\nyou and then the compile time takes\\nforever<00:01:18.799><c> so</c><00:01:19.280><c> why</c><00:01:19.520><c> is</c><00:01:19.759><c> that</c><00:01:20.320><c> why</c><00:01:20.479><c> does</c><00:01:20.759><c> rust</c>\\n\\n00:01:21.270 --> 00:01:21.280 align:start position:0%\\nforever so why is that why does rust\\n \\n\\n00:01:21.280 --> 00:01:23.870 align:start position:0%\\nforever so why is that why does rust\\ntake<00:01:21.520><c> forever</c><00:01:22.240><c> to</c><00:01:22.520><c> compile</c><00:01:23.119><c> and</c><00:01:23.320><c> why</c><00:01:23.400><c> are</c><00:01:23.560><c> the</c>\\n\\n00:01:23.870 --> 00:01:23.880 align:start position:0%\\ntake forever to compile and why are the\\n \\n\\n00:01:23.880 --> 00:01:27.069 align:start position:0%\\ntake forever to compile and why are the\\nbinary<00:01:24.320><c> so</c><00:01:24.600><c> huge</c><00:01:25.159><c> now</c><00:01:25.479><c> fortunately</c><00:01:26.479><c> libraries</c>\\n\\n00:01:27.069 --> 00:01:27.079 align:start position:0%\\nbinary so huge now fortunately libraries\\n \\n\\n00:01:27.079 --> 00:01:30.149 align:start position:0%\\nbinary so huge now fortunately libraries\\nwould<00:01:27.320><c> fix</c><00:01:27.840><c> all</c><00:01:28.040><c> of</c><00:01:28.280><c> this</c><00:01:28.759><c> but</c><00:01:29.119><c> unfortunately</c>\\n\\n00:01:30.149 --> 00:01:30.159 align:start position:0%\\nwould fix all of this but unfortunately\\n \\n\\n00:01:30.159 --> 00:01:33.350 align:start position:0%\\nwould fix all of this but unfortunately\\nrust<00:01:30.560><c> libraries</c><00:01:31.560><c> don't</c><00:01:32.079><c> actually</c><00:01:32.600><c> exist</c><00:01:33.200><c> and</c>\\n\\n00:01:33.350 --> 00:01:33.360 align:start position:0%\\nrust libraries don't actually exist and\\n \\n\\n00:01:33.360 --> 00:01:35.069 align:start position:0%\\nrust libraries don't actually exist and\\nthey<00:01:33.520><c> may</c><00:01:33.759><c> never</c><00:01:34.119><c> exist</c><00:01:34.560><c> and</c><00:01:34.640><c> so</c><00:01:34.840><c> before</c><00:01:35.000><c> you</c>\\n\\n00:01:35.069 --> 00:01:35.079 align:start position:0%\\nthey may never exist and so before you\\n \\n\\n00:01:35.079 --> 00:01:37.310 align:start position:0%\\nthey may never exist and so before you\\ntell<00:01:35.200><c> me</c><00:01:35.360><c> about</c><00:01:35.600><c> cargo</c><00:01:36.119><c> and</c><00:01:36.280><c> how</c><00:01:36.479><c> cargo</c><00:01:36.880><c> crate</c>\\n\\n00:01:37.310 --> 00:01:37.320 align:start position:0%\\ntell me about cargo and how cargo crate\\n \\n\\n00:01:37.320 --> 00:01:39.270 align:start position:0%\\ntell me about cargo and how cargo crate\\nare<00:01:37.600><c> libraries</c><00:01:38.200><c> you</c><00:01:38.360><c> download</c><00:01:38.840><c> and</c><00:01:38.920><c> hold</c><00:01:39.159><c> your</c>\\n\\n00:01:39.270 --> 00:01:39.280 align:start position:0%\\nare libraries you download and hold your\\n \\n\\n00:01:39.280 --> 00:01:42.109 align:start position:0%\\nare libraries you download and hold your\\nhorses<00:01:39.840><c> cargo</c><00:01:40.439><c> is</c><00:01:40.759><c> a</c><00:01:41.000><c> package</c><00:01:41.280><c> manager</c><00:01:41.840><c> and</c><00:01:41.960><c> it</c>\\n\\n00:01:42.109 --> 00:01:42.119 align:start position:0%\\nhorses cargo is a package manager and it\\n \\n\\n00:01:42.119 --> 00:01:44.069 align:start position:0%\\nhorses cargo is a package manager and it\\ndoes<00:01:42.479><c> manage</c><00:01:42.960><c> libraries</c><00:01:43.680><c> but</c><00:01:43.840><c> these</c>\\n\\n00:01:44.069 --> 00:01:44.079 align:start position:0%\\ndoes manage libraries but these\\n \\n\\n00:01:44.079 --> 00:01:46.109 align:start position:0%\\ndoes manage libraries but these\\nlibraries<00:01:44.640><c> aren't</c><00:01:45.000><c> the</c><00:01:45.159><c> same</c><00:01:45.479><c> as</c><00:01:45.640><c> libraries</c>\\n\\n00:01:46.109 --> 00:01:46.119 align:start position:0%\\nlibraries aren't the same as libraries\\n \\n\\n00:01:46.119 --> 00:01:48.389 align:start position:0%\\nlibraries aren't the same as libraries\\nand<00:01:46.280><c> languages</c><00:01:46.680><c> like</c><00:01:46.840><c> C</c><00:01:47.439><c> let</c><00:01:47.560><c> me</c><00:01:47.719><c> explain</c>\\n\\n00:01:48.389 --> 00:01:48.399 align:start position:0%\\nand languages like C let me explain\\n \\n\\n00:01:48.399 --> 00:01:50.789 align:start position:0%\\nand languages like C let me explain\\nevery<00:01:48.719><c> program</c><00:01:49.119><c> you</c><00:01:49.280><c> write</c><00:01:49.640><c> in</c><00:01:49.799><c> C</c><00:01:50.119><c> for</c><00:01:50.320><c> example</c>\\n\\n00:01:50.789 --> 00:01:50.799 align:start position:0%\\nevery program you write in C for example\\n \\n\\n00:01:50.799 --> 00:01:54.590 align:start position:0%\\nevery program you write in C for example\\ndepends<00:01:51.280><c> on</c><00:01:51.560><c> the</c><00:01:51.759><c> gnu</c><00:01:52.520><c> C</c><00:01:52.960><c> library</c><00:01:53.520><c> or</c><00:01:53.880><c> libc</c>\\n\\n00:01:54.590 --> 00:01:54.600 align:start position:0%\\ndepends on the gnu C library or libc\\n \\n\\n00:01:54.600 --> 00:01:56.590 align:start position:0%\\ndepends on the gnu C library or libc\\nfunctions<00:01:55.040><c> that</c><00:01:55.159><c> you</c><00:01:55.360><c> use</c><00:01:55.680><c> in</c><00:01:55.960><c> every</c><00:01:56.240><c> piece</c><00:01:56.399><c> of</c>\\n\\n00:01:56.590 --> 00:01:56.600 align:start position:0%\\nfunctions that you use in every piece of\\n \\n\\n00:01:56.600 --> 00:01:59.270 align:start position:0%\\nfunctions that you use in every piece of\\ncode<00:01:57.000><c> like</c><00:01:57.320><c> open</c><00:01:57.680><c> or</c><00:01:57.920><c> read</c><00:01:58.240><c> or</c><00:01:58.479><c> write</c><00:01:58.719><c> or</c><00:01:58.920><c> close</c>\\n\\n00:01:59.270 --> 00:01:59.280 align:start position:0%\\ncode like open or read or write or close\\n \\n\\n00:01:59.280 --> 00:02:00.990 align:start position:0%\\ncode like open or read or write or close\\nare<00:01:59.479><c> already</c><00:01:59.880><c> already</c><00:02:00.159><c> written</c><00:02:00.520><c> for</c><00:02:00.759><c> you</c>\\n\\n00:02:00.990 --> 00:02:01.000 align:start position:0%\\nare already already written for you\\n \\n\\n00:02:01.000 --> 00:02:02.950 align:start position:0%\\nare already already written for you\\nluckily<00:02:01.560><c> and</c><00:02:01.799><c> more</c><00:02:02.000><c> importantly</c><00:02:02.640><c> they're</c>\\n\\n00:02:02.950 --> 00:02:02.960 align:start position:0%\\nluckily and more importantly they're\\n \\n\\n00:02:02.960 --> 00:02:05.830 align:start position:0%\\nluckily and more importantly they're\\nalready<00:02:03.360><c> compiled</c><00:02:03.880><c> for</c><00:02:04.119><c> you</c><00:02:04.520><c> lipy</c><00:02:05.159><c> exists</c><00:02:05.680><c> as</c>\\n\\n00:02:05.830 --> 00:02:05.840 align:start position:0%\\nalready compiled for you lipy exists as\\n \\n\\n00:02:05.840 --> 00:02:08.510 align:start position:0%\\nalready compiled for you lipy exists as\\na<00:02:06.000><c> shared</c><00:02:06.719><c> object</c><00:02:07.200><c> which</c><00:02:07.360><c> lives</c><00:02:07.799><c> on</c><00:02:08.000><c> your</c><00:02:08.200><c> file</c>\\n\\n00:02:08.510 --> 00:02:08.520 align:start position:0%\\na shared object which lives on your file\\n \\n\\n00:02:08.520 --> 00:02:10.630 align:start position:0%\\na shared object which lives on your file\\nsystem<00:02:09.000><c> as</c><00:02:09.119><c> a</c><00:02:09.360><c> file</c><00:02:09.759><c> that</c><00:02:09.879><c> your</c><00:02:10.039><c> loader</c><00:02:10.440><c> can</c>\\n\\n00:02:10.630 --> 00:02:10.640 align:start position:0%\\nsystem as a file that your loader can\\n \\n\\n00:02:10.640 --> 00:02:12.910 align:start position:0%\\nsystem as a file that your loader can\\nreach<00:02:10.920><c> into</c><00:02:11.480><c> for</c><00:02:11.800><c> functions</c><00:02:12.280><c> that</c><00:02:12.400><c> it</c><00:02:12.560><c> needs</c>\\n\\n00:02:12.910 --> 00:02:12.920 align:start position:0%\\nreach into for functions that it needs\\n \\n\\n00:02:12.920 --> 00:02:15.430 align:start position:0%\\nreach into for functions that it needs\\nto<00:02:13.120><c> run</c><00:02:13.440><c> the</c><00:02:13.640><c> program</c><00:02:14.040><c> at</c><00:02:14.200><c> runtime</c><00:02:15.000><c> and</c><00:02:15.239><c> the</c>\\n\\n00:02:15.430 --> 00:02:15.440 align:start position:0%\\nto run the program at runtime and the\\n \\n\\n00:02:15.440 --> 00:02:17.350 align:start position:0%\\nto run the program at runtime and the\\nreason<00:02:15.840><c> the</c><00:02:15.959><c> C</c><00:02:16.200><c> language</c><00:02:16.519><c> is</c><00:02:16.599><c> able</c><00:02:16.800><c> to</c><00:02:16.959><c> do</c><00:02:17.160><c> this</c>\\n\\n00:02:17.350 --> 00:02:17.360 align:start position:0%\\nreason the C language is able to do this\\n \\n\\n00:02:17.360 --> 00:02:19.910 align:start position:0%\\nreason the C language is able to do this\\nand<00:02:17.519><c> specifically</c><00:02:18.000><c> in</c><00:02:18.160><c> Linux</c><00:02:18.840><c> is</c><00:02:19.040><c> because</c><00:02:19.519><c> of</c>\\n\\n00:02:19.910 --> 00:02:19.920 align:start position:0%\\nand specifically in Linux is because of\\n \\n\\n00:02:19.920 --> 00:02:23.030 align:start position:0%\\nand specifically in Linux is because of\\nthe<00:02:20.239><c> definition</c><00:02:21.040><c> of</c><00:02:21.319><c> the</c><00:02:21.519><c> E.L</c><00:02:22.160><c> application</c>\\n\\n00:02:23.030 --> 00:02:23.040 align:start position:0%\\nthe definition of the E.L application\\n \\n\\n00:02:23.040 --> 00:02:26.470 align:start position:0%\\nthe definition of the E.L application\\nbinary<00:02:23.680><c> interface</c><00:02:24.519><c> or</c><00:02:24.840><c> the</c><00:02:25.080><c> ABI</c><00:02:25.879><c> defined</c><00:02:26.280><c> for</c>\\n\\n00:02:26.470 --> 00:02:26.480 align:start position:0%\\nbinary interface or the ABI defined for\\n \\n\\n00:02:26.480 --> 00:02:28.910 align:start position:0%\\nbinary interface or the ABI defined for\\nthe<00:02:26.640><c> elf</c><00:02:27.080><c> file</c><00:02:27.360><c> format</c><00:02:27.840><c> that</c><00:02:28.040><c> adheres</c><00:02:28.680><c> to</c>\\n\\n00:02:28.910 --> 00:02:28.920 align:start position:0%\\nthe elf file format that adheres to\\n \\n\\n00:02:28.920 --> 00:02:30.509 align:start position:0%\\nthe elf file format that adheres to\\nfunction<00:02:29.280><c> calls</c><00:02:29.519><c> in</c><00:02:29.840><c> a</c><00:02:29.959><c> way</c><00:02:30.160><c> that</c><00:02:30.280><c> are</c>\\n\\n00:02:30.509 --> 00:02:30.519 align:start position:0%\\nfunction calls in a way that are\\n \\n\\n00:02:30.519 --> 00:02:33.350 align:start position:0%\\nfunction calls in a way that are\\ncompatible<00:02:31.160><c> with</c><00:02:31.319><c> C</c><00:02:32.040><c> this</c><00:02:32.239><c> ABI</c><00:02:32.760><c> exposes</c><00:02:33.200><c> an</c>\\n\\n00:02:33.350 --> 00:02:33.360 align:start position:0%\\ncompatible with C this ABI exposes an\\n \\n\\n00:02:33.360 --> 00:02:35.550 align:start position:0%\\ncompatible with C this ABI exposes an\\ninterface<00:02:33.840><c> for</c><00:02:34.080><c> your</c><00:02:34.360><c> program</c><00:02:34.879><c> an</c><00:02:35.040><c> elf</c><00:02:35.400><c> to</c>\\n\\n00:02:35.550 --> 00:02:35.560 align:start position:0%\\ninterface for your program an elf to\\n \\n\\n00:02:35.560 --> 00:02:38.190 align:start position:0%\\ninterface for your program an elf to\\nreach<00:02:35.840><c> into</c><00:02:36.440><c> another</c><00:02:36.800><c> elf</c><00:02:37.280><c> and</c><00:02:37.400><c> find</c><00:02:37.920><c> any</c>\\n\\n00:02:38.190 --> 00:02:38.200 align:start position:0%\\nreach into another elf and find any\\n \\n\\n00:02:38.200 --> 00:02:40.229 align:start position:0%\\nreach into another elf and find any\\nfunction<00:02:38.560><c> that</c><00:02:38.680><c> it</c><00:02:38.800><c> needs</c><00:02:39.280><c> the</c><00:02:39.400><c> elf</c><00:02:39.680><c> ABI</c>\\n\\n00:02:40.229 --> 00:02:40.239 align:start position:0%\\nfunction that it needs the elf ABI\\n \\n\\n00:02:40.239 --> 00:02:42.390 align:start position:0%\\nfunction that it needs the elf ABI\\nspecifies<00:02:40.840><c> a</c><00:02:41.040><c> table</c><00:02:41.280><c> of</c><00:02:41.480><c> functions</c><00:02:42.000><c> or</c><00:02:42.200><c> a</c>\\n\\n00:02:42.390 --> 00:02:42.400 align:start position:0%\\nspecifies a table of functions or a\\n \\n\\n00:02:42.400 --> 00:02:44.550 align:start position:0%\\nspecifies a table of functions or a\\nsymbol<00:02:42.800><c> table</c><00:02:43.280><c> that</c><00:02:43.400><c> a</c><00:02:43.560><c> program</c><00:02:43.920><c> can</c><00:02:44.120><c> parse</c>\\n\\n00:02:44.550 --> 00:02:44.560 align:start position:0%\\nsymbol table that a program can parse\\n \\n\\n00:02:44.560 --> 00:02:46.910 align:start position:0%\\nsymbol table that a program can parse\\nspecifically<00:02:45.159><c> to</c><00:02:45.440><c> find</c><00:02:45.800><c> a</c><00:02:46.000><c> function</c><00:02:46.480><c> that</c><00:02:46.560><c> is</c>\\n\\n00:02:46.910 --> 00:02:46.920 align:start position:0%\\nspecifically to find a function that is\\n \\n\\n00:02:46.920 --> 00:02:49.190 align:start position:0%\\nspecifically to find a function that is\\nexported<00:02:47.599><c> by</c><00:02:47.800><c> that</c><00:02:48.040><c> program</c><00:02:48.640><c> and</c><00:02:48.879><c> this</c><00:02:48.959><c> is</c>\\n\\n00:02:49.190 --> 00:02:49.200 align:start position:0%\\nexported by that program and this is\\n \\n\\n00:02:49.200 --> 00:02:52.030 align:start position:0%\\nexported by that program and this is\\nexactly<00:02:49.720><c> how</c><00:02:49.879><c> libc</c><00:02:50.519><c> exposes</c><00:02:51.120><c> function</c><00:02:51.519><c> calls</c>\\n\\n00:02:52.030 --> 00:02:52.040 align:start position:0%\\nexactly how libc exposes function calls\\n \\n\\n00:02:52.040 --> 00:02:54.630 align:start position:0%\\nexactly how libc exposes function calls\\nthis<00:02:52.200><c> ABI</c><00:02:52.720><c> also</c><00:02:53.080><c> guarantees</c><00:02:53.800><c> that</c><00:02:54.000><c> the</c><00:02:54.200><c> data</c>\\n\\n00:02:54.630 --> 00:02:54.640 align:start position:0%\\nthis ABI also guarantees that the data\\n \\n\\n00:02:54.640 --> 00:02:57.030 align:start position:0%\\nthis ABI also guarantees that the data\\ndefined<00:02:55.000><c> in</c><00:02:55.159><c> one</c><00:02:55.480><c> program</c><00:02:56.040><c> is</c><00:02:56.159><c> in</c><00:02:56.400><c> the</c><00:02:56.640><c> same</c>\\n\\n00:02:57.030 --> 00:02:57.040 align:start position:0%\\ndefined in one program is in the same\\n \\n\\n00:02:57.040 --> 00:02:59.070 align:start position:0%\\ndefined in one program is in the same\\norder<00:02:57.440><c> and</c><00:02:57.599><c> in</c><00:02:57.720><c> the</c><00:02:57.879><c> same</c><00:02:58.159><c> location</c><00:02:58.840><c> as</c>\\n\\n00:02:59.070 --> 00:02:59.080 align:start position:0%\\norder and in the same location as\\n \\n\\n00:02:59.080 --> 00:03:01.710 align:start position:0%\\norder and in the same location as\\nanother<00:02:59.519><c> so</c><00:02:59.760><c> so</c><00:02:59.959><c> struct</c><00:03:00.400><c> x</c><00:03:00.720><c> with</c><00:03:00.879><c> elements</c><00:03:01.319><c> a</c><00:03:01.519><c> b</c>\\n\\n00:03:01.710 --> 00:03:01.720 align:start position:0%\\nanother so so struct x with elements a b\\n \\n\\n00:03:01.720 --> 00:03:04.270 align:start position:0%\\nanother so so struct x with elements a b\\nand<00:03:01.879><c> c</c><00:03:02.360><c> will</c><00:03:02.599><c> always</c><00:03:02.920><c> be</c><00:03:03.159><c> in</c><00:03:03.319><c> that</c><00:03:03.480><c> order</c><00:03:03.959><c> a</c><00:03:04.120><c> b</c>\\n\\n00:03:04.270 --> 00:03:04.280 align:start position:0%\\nand c will always be in that order a b\\n \\n\\n00:03:04.280 --> 00:03:06.309 align:start position:0%\\nand c will always be in that order a b\\nand<00:03:04.440><c> c</c><00:03:04.920><c> this</c><00:03:05.040><c> allows</c><00:03:05.400><c> interoperability</c>\\n\\n00:03:06.309 --> 00:03:06.319 align:start position:0%\\nand c this allows interoperability\\n \\n\\n00:03:06.319 --> 00:03:08.830 align:start position:0%\\nand c this allows interoperability\\nbetween<00:03:06.799><c> not</c><00:03:07.080><c> just</c><00:03:07.319><c> functions</c><00:03:07.959><c> but</c><00:03:08.239><c> data</c><00:03:08.560><c> in</c>\\n\\n00:03:08.830 --> 00:03:08.840 align:start position:0%\\nbetween not just functions but data in\\n \\n\\n00:03:08.840 --> 00:03:10.430 align:start position:0%\\nbetween not just functions but data in\\nlibraries<00:03:09.519><c> as</c><00:03:09.680><c> well</c><00:03:10.000><c> now</c><00:03:10.120><c> this</c><00:03:10.200><c> is</c><00:03:10.280><c> where</c><00:03:10.360><c> it</c>\\n\\n00:03:10.430 --> 00:03:10.440 align:start position:0%\\nlibraries as well now this is where it\\n \\n\\n00:03:10.440 --> 00:03:12.589 align:start position:0%\\nlibraries as well now this is where it\\nstarts<00:03:10.680><c> to</c><00:03:10.760><c> get</c><00:03:10.840><c> a</c><00:03:10.920><c> little</c><00:03:11.120><c> crazy</c><00:03:11.720><c> rust</c><00:03:12.319><c> does</c>\\n\\n00:03:12.589 --> 00:03:12.599 align:start position:0%\\nstarts to get a little crazy rust does\\n \\n\\n00:03:12.599 --> 00:03:15.750 align:start position:0%\\nstarts to get a little crazy rust does\\nnot<00:03:12.959><c> at</c><00:03:13.159><c> this</c><00:03:13.360><c> time</c><00:03:13.680><c> have</c><00:03:13.840><c> a</c><00:03:14.080><c> stable</c><00:03:14.720><c> ABI</c><00:03:15.319><c> or</c><00:03:15.480><c> an</c>\\n\\n00:03:15.750 --> 00:03:15.760 align:start position:0%\\nnot at this time have a stable ABI or an\\n \\n\\n00:03:15.760 --> 00:03:18.270 align:start position:0%\\nnot at this time have a stable ABI or an\\napplication<00:03:16.400><c> binary</c><00:03:16.879><c> interface</c><00:03:17.480><c> to</c><00:03:17.680><c> share</c>\\n\\n00:03:18.270 --> 00:03:18.280 align:start position:0%\\napplication binary interface to share\\n \\n\\n00:03:18.280 --> 00:03:21.430 align:start position:0%\\napplication binary interface to share\\ninformation<00:03:19.159><c> across</c><00:03:19.720><c> multiple</c><00:03:20.280><c> binaries</c><00:03:21.040><c> so</c>\\n\\n00:03:21.430 --> 00:03:21.440 align:start position:0%\\ninformation across multiple binaries so\\n \\n\\n00:03:21.440 --> 00:03:24.789 align:start position:0%\\ninformation across multiple binaries so\\ncargo<00:03:22.080><c> packages</c><00:03:22.760><c> exist</c><00:03:23.239><c> but</c><00:03:23.440><c> rust</c><00:03:24.120><c> libraries</c>\\n\\n00:03:24.789 --> 00:03:24.799 align:start position:0%\\ncargo packages exist but rust libraries\\n \\n\\n00:03:24.799 --> 00:03:27.149 align:start position:0%\\ncargo packages exist but rust libraries\\ndon't<00:03:25.280><c> all</c><00:03:25.440><c> the</c><00:03:25.599><c> cargo</c><00:03:25.959><c> package</c><00:03:26.319><c> is</c><00:03:26.640><c> is</c><00:03:26.760><c> a</c><00:03:26.879><c> blob</c>\\n\\n00:03:27.149 --> 00:03:27.159 align:start position:0%\\ndon't all the cargo package is is a blob\\n \\n\\n00:03:27.159 --> 00:03:29.270 align:start position:0%\\ndon't all the cargo package is is a blob\\nof<00:03:27.280><c> source</c><00:03:27.680><c> that</c><00:03:27.799><c> you</c><00:03:28.000><c> locally</c><00:03:28.480><c> compile</c><00:03:29.159><c> and</c>\\n\\n00:03:29.270 --> 00:03:29.280 align:start position:0%\\nof source that you locally compile and\\n \\n\\n00:03:29.280 --> 00:03:32.149 align:start position:0%\\nof source that you locally compile and\\nit<00:03:29.439><c> can</c><00:03:29.799><c> binds</c><00:03:30.319><c> all</c><00:03:30.480><c> of</c><00:03:30.680><c> that</c><00:03:30.879><c> code</c><00:03:31.360><c> into</c><00:03:31.760><c> one</c>\\n\\n00:03:32.149 --> 00:03:32.159 align:start position:0%\\nit can binds all of that code into one\\n \\n\\n00:03:32.159 --> 00:03:34.710 align:start position:0%\\nit can binds all of that code into one\\nbig<00:03:32.400><c> blob</c><00:03:32.799><c> of</c><00:03:32.959><c> code</c><00:03:33.360><c> inside</c><00:03:33.680><c> of</c><00:03:33.840><c> a</c><00:03:34.040><c> singular</c>\\n\\n00:03:34.710 --> 00:03:34.720 align:start position:0%\\nbig blob of code inside of a singular\\n \\n\\n00:03:34.720 --> 00:03:37.110 align:start position:0%\\nbig blob of code inside of a singular\\nelf<00:03:35.239><c> so</c><00:03:35.439><c> effectively</c><00:03:36.200><c> anytime</c><00:03:36.560><c> you</c><00:03:36.720><c> compile</c><00:03:37.040><c> a</c>\\n\\n00:03:37.110 --> 00:03:37.120 align:start position:0%\\nelf so effectively anytime you compile a\\n \\n\\n00:03:37.120 --> 00:03:39.509 align:start position:0%\\nelf so effectively anytime you compile a\\nrust<00:03:37.480><c> program</c><00:03:38.000><c> you</c><00:03:38.159><c> are</c><00:03:38.360><c> compiling</c><00:03:39.200><c> every</c>\\n\\n00:03:39.509 --> 00:03:39.519 align:start position:0%\\nrust program you are compiling every\\n \\n\\n00:03:39.519 --> 00:03:41.589 align:start position:0%\\nrust program you are compiling every\\ncargo<00:03:39.959><c> package</c><00:03:40.439><c> together</c><00:03:40.799><c> required</c><00:03:41.159><c> for</c><00:03:41.360><c> that</c>\\n\\n00:03:41.589 --> 00:03:41.599 align:start position:0%\\ncargo package together required for that\\n \\n\\n00:03:41.599 --> 00:03:43.750 align:start position:0%\\ncargo package together required for that\\nproject<00:03:42.120><c> and</c><00:03:42.280><c> smashing</c><00:03:42.799><c> them</c><00:03:43.040><c> all</c><00:03:43.319><c> into</c><00:03:43.560><c> a</c>\\n\\n00:03:43.750 --> 00:03:43.760 align:start position:0%\\nproject and smashing them all into a\\n \\n\\n00:03:43.760 --> 00:03:45.910 align:start position:0%\\nproject and smashing them all into a\\nsingle<00:03:44.080><c> binary</c><00:03:44.760><c> hence</c><00:03:45.080><c> the</c><00:03:45.239><c> high</c><00:03:45.439><c> compile</c>\\n\\n00:03:45.910 --> 00:03:45.920 align:start position:0%\\nsingle binary hence the high compile\\n \\n\\n00:03:45.920 --> 00:03:48.789 align:start position:0%\\nsingle binary hence the high compile\\ntimes<00:03:46.319><c> and</c><00:03:46.599><c> hence</c><00:03:46.920><c> the</c><00:03:47.159><c> high</c><00:03:47.640><c> binary</c><00:03:48.120><c> sizes</c><00:03:48.640><c> so</c>\\n\\n00:03:48.789 --> 00:03:48.799 align:start position:0%\\ntimes and hence the high binary sizes so\\n \\n\\n00:03:48.799 --> 00:03:51.070 align:start position:0%\\ntimes and hence the high binary sizes so\\nhow<00:03:48.879><c> do</c><00:03:49.000><c> we</c><00:03:49.120><c> fix</c><00:03:49.400><c> this</c><00:03:49.840><c> the</c><00:03:50.000><c> answer</c><00:03:50.519><c> is</c><00:03:50.760><c> not</c>\\n\\n00:03:51.070 --> 00:03:51.080 align:start position:0%\\nhow do we fix this the answer is not\\n \\n\\n00:03:51.080 --> 00:03:53.869 align:start position:0%\\nhow do we fix this the answer is not\\nsimple<00:03:51.599><c> organizing</c><00:03:52.200><c> an</c><00:03:52.400><c> ABI</c><00:03:52.920><c> for</c><00:03:53.159><c> a</c><00:03:53.319><c> language</c>\\n\\n00:03:53.869 --> 00:03:53.879 align:start position:0%\\nsimple organizing an ABI for a language\\n \\n\\n00:03:53.879 --> 00:03:56.470 align:start position:0%\\nsimple organizing an ABI for a language\\nand<00:03:54.120><c> spec</c><00:03:54.480><c> like</c><00:03:54.599><c> the</c><00:03:54.720><c> C</c><00:03:55.040><c> elf</c><00:03:55.519><c> is</c><00:03:55.720><c> pretty</c><00:03:55.959><c> simple</c>\\n\\n00:03:56.470 --> 00:03:56.480 align:start position:0%\\nand spec like the C elf is pretty simple\\n \\n\\n00:03:56.480 --> 00:03:58.750 align:start position:0%\\nand spec like the C elf is pretty simple\\nmainly<00:03:56.840><c> because</c><00:03:57.200><c> C</c><00:03:57.599><c> is</c><00:03:57.840><c> just</c><00:03:58.079><c> a</c><00:03:58.280><c> high</c><00:03:58.480><c> level</c>\\n\\n00:03:58.750 --> 00:03:58.760 align:start position:0%\\nmainly because C is just a high level\\n \\n\\n00:03:58.760 --> 00:04:00.789 align:start position:0%\\nmainly because C is just a high level\\nabstraction<00:03:59.319><c> around</c><00:03:59.519><c> a</c><00:03:59.720><c> assembly</c><00:04:00.280><c> so</c><00:04:00.599><c> there</c>\\n\\n00:04:00.789 --> 00:04:00.799 align:start position:0%\\nabstraction around a assembly so there\\n \\n\\n00:04:00.799 --> 00:04:03.589 align:start position:0%\\nabstraction around a assembly so there\\nisn't<00:04:01.319><c> too</c><00:04:01.560><c> much</c><00:04:01.840><c> information</c><00:04:02.400><c> to</c><00:04:02.680><c> hide</c><00:04:03.280><c> just</c>\\n\\n00:04:03.589 --> 00:04:03.599 align:start position:0%\\nisn't too much information to hide just\\n \\n\\n00:04:03.599 --> 00:04:05.910 align:start position:0%\\nisn't too much information to hide just\\nbasic<00:04:04.000><c> types</c><00:04:04.400><c> and</c><00:04:04.560><c> function</c><00:04:04.920><c> calls</c><00:04:05.480><c> rust</c><00:04:05.799><c> on</c>\\n\\n00:04:05.910 --> 00:04:05.920 align:start position:0%\\nbasic types and function calls rust on\\n \\n\\n00:04:05.920 --> 00:04:08.869 align:start position:0%\\nbasic types and function calls rust on\\nthe<00:04:06.040><c> other</c><00:04:06.239><c> hand</c><00:04:06.640><c> is</c><00:04:06.799><c> a</c><00:04:07.200><c> different</c><00:04:07.840><c> beast</c><00:04:08.480><c> stru</c>\\n\\n00:04:08.869 --> 00:04:08.879 align:start position:0%\\nthe other hand is a different beast stru\\n \\n\\n00:04:08.879 --> 00:04:10.990 align:start position:0%\\nthe other hand is a different beast stru\\nand<00:04:09.040><c> rust</c><00:04:09.439><c> really</c><00:04:09.760><c> aren't</c><00:04:10.239><c> guaranteed</c><00:04:10.720><c> to</c><00:04:10.840><c> be</c>\\n\\n00:04:10.990 --> 00:04:11.000 align:start position:0%\\nand rust really aren't guaranteed to be\\n \\n\\n00:04:11.000 --> 00:04:13.229 align:start position:0%\\nand rust really aren't guaranteed to be\\nin<00:04:11.200><c> any</c><00:04:11.519><c> particular</c><00:04:11.959><c> order</c><00:04:12.439><c> across</c><00:04:12.799><c> program</c>\\n\\n00:04:13.229 --> 00:04:13.239 align:start position:0%\\nin any particular order across program\\n \\n\\n00:04:13.239 --> 00:04:15.789 align:start position:0%\\nin any particular order across program\\nboundaries<00:04:13.840><c> as</c><00:04:13.959><c> long</c><00:04:14.120><c> as</c><00:04:14.400><c> a</c><00:04:14.560><c> and</c><00:04:14.760><c> b</c><00:04:14.959><c> are</c><00:04:15.200><c> in</c><00:04:15.640><c> the</c>\\n\\n00:04:15.789 --> 00:04:15.799 align:start position:0%\\nboundaries as long as a and b are in the\\n \\n\\n00:04:15.799 --> 00:04:18.229 align:start position:0%\\nboundaries as long as a and b are in the\\nstructure<00:04:16.440><c> it's</c><00:04:16.680><c> fine</c><00:04:17.120><c> also</c><00:04:17.440><c> generics</c><00:04:17.919><c> create</c>\\n\\n00:04:18.229 --> 00:04:18.239 align:start position:0%\\nstructure it's fine also generics create\\n \\n\\n00:04:18.239 --> 00:04:19.949 align:start position:0%\\nstructure it's fine also generics create\\na<00:04:18.400><c> whole</c><00:04:18.639><c> other</c><00:04:18.840><c> world</c><00:04:19.040><c> of</c><00:04:19.239><c> problems</c><00:04:19.680><c> because</c>\\n\\n00:04:19.949 --> 00:04:19.959 align:start position:0%\\na whole other world of problems because\\n \\n\\n00:04:19.959 --> 00:04:22.030 align:start position:0%\\na whole other world of problems because\\nthey're<00:04:20.239><c> statically</c><00:04:20.759><c> dispatched</c><00:04:21.400><c> and</c><00:04:21.680><c> built</c>\\n\\n00:04:22.030 --> 00:04:22.040 align:start position:0%\\nthey're statically dispatched and built\\n \\n\\n00:04:22.040 --> 00:04:24.590 align:start position:0%\\nthey're statically dispatched and built\\nat<00:04:22.280><c> compile</c><00:04:22.800><c> time</c><00:04:23.240><c> as</c><00:04:23.400><c> well</c><00:04:23.759><c> as</c><00:04:23.960><c> many</c><00:04:24.240><c> other</c>\\n\\n00:04:24.590 --> 00:04:24.600 align:start position:0%\\nat compile time as well as many other\\n \\n\\n00:04:24.600 --> 00:04:26.830 align:start position:0%\\nat compile time as well as many other\\ncomplex<00:04:25.080><c> issues</c><00:04:25.520><c> with</c><00:04:25.960><c> types</c><00:04:26.400><c> in</c><00:04:26.639><c> the</c>\\n\\n00:04:26.830 --> 00:04:26.840 align:start position:0%\\ncomplex issues with types in the\\n \\n\\n00:04:26.840 --> 00:04:29.390 align:start position:0%\\ncomplex issues with types in the\\nlanguage<00:04:27.600><c> also</c><00:04:28.120><c> a</c><00:04:28.280><c> ton</c><00:04:28.479><c> of</c><00:04:28.720><c> power</c><00:04:28.919><c> and</c><00:04:29.080><c> rust</c>\\n\\n00:04:29.390 --> 00:04:29.400 align:start position:0%\\nlanguage also a ton of power and rust\\n \\n\\n00:04:29.400 --> 00:04:31.909 align:start position:0%\\nlanguage also a ton of power and rust\\ncomes<00:04:29.800><c> from</c><00:04:30.080><c> compile</c><00:04:30.560><c> time</c><00:04:30.840><c> static</c><00:04:31.240><c> analyzers</c>\\n\\n00:04:31.909 --> 00:04:31.919 align:start position:0%\\ncomes from compile time static analyzers\\n \\n\\n00:04:31.919 --> 00:04:33.710 align:start position:0%\\ncomes from compile time static analyzers\\nthat<00:04:32.039><c> run</c><00:04:32.240><c> checks</c><00:04:32.560><c> like</c><00:04:32.680><c> the</c><00:04:32.800><c> borrow</c><00:04:33.120><c> Checker</c>\\n\\n00:04:33.710 --> 00:04:33.720 align:start position:0%\\nthat run checks like the borrow Checker\\n \\n\\n00:04:33.720 --> 00:04:35.469 align:start position:0%\\nthat run checks like the borrow Checker\\nwhich<00:04:34.000><c> isn't</c><00:04:34.440><c> possible</c><00:04:35.000><c> if</c><00:04:35.160><c> there's</c><00:04:35.360><c> a</c>\\n\\n00:04:35.469 --> 00:04:35.479 align:start position:0%\\nwhich isn't possible if there's a\\n \\n\\n00:04:35.479 --> 00:04:37.469 align:start position:0%\\nwhich isn't possible if there's a\\ncompiled<00:04:35.919><c> binary</c><00:04:36.639><c> if</c><00:04:36.720><c> I</c><00:04:36.880><c> pass</c><00:04:37.039><c> a</c><00:04:37.120><c> mutable</c>\\n\\n00:04:37.469 --> 00:04:37.479 align:start position:0%\\ncompiled binary if I pass a mutable\\n \\n\\n00:04:37.479 --> 00:04:39.790 align:start position:0%\\ncompiled binary if I pass a mutable\\nreference<00:04:38.039><c> into</c><00:04:38.280><c> a</c><00:04:38.440><c> compiled</c><00:04:38.919><c> binary</c><00:04:39.520><c> how</c><00:04:39.680><c> is</c>\\n\\n00:04:39.790 --> 00:04:39.800 align:start position:0%\\nreference into a compiled binary how is\\n \\n\\n00:04:39.800 --> 00:04:41.629 align:start position:0%\\nreference into a compiled binary how is\\nit<00:04:40.039><c> possible</c><00:04:40.320><c> for</c><00:04:40.479><c> the</c><00:04:40.639><c> borrow</c><00:04:41.000><c> Checker</c><00:04:41.440><c> to</c>\\n\\n00:04:41.629 --> 00:04:41.639 align:start position:0%\\nit possible for the borrow Checker to\\n \\n\\n00:04:41.639 --> 00:04:43.510 align:start position:0%\\nit possible for the borrow Checker to\\nmake<00:04:41.800><c> sure</c><00:04:42.120><c> that</c><00:04:42.240><c> the</c><00:04:42.400><c> reference</c><00:04:42.840><c> is</c><00:04:43.039><c> used</c><00:04:43.400><c> in</c>\\n\\n00:04:43.510 --> 00:04:43.520 align:start position:0%\\nmake sure that the reference is used in\\n \\n\\n00:04:43.520 --> 00:04:45.870 align:start position:0%\\nmake sure that the reference is used in\\na<00:04:43.680><c> way</c><00:04:44.120><c> that</c><00:04:44.240><c> is</c><00:04:44.440><c> safe</c><00:04:45.000><c> now</c><00:04:45.199><c> I</c><00:04:45.280><c> know</c><00:04:45.600><c> what</c><00:04:45.680><c> a</c><00:04:45.759><c> lot</c>\\n\\n00:04:45.870 --> 00:04:45.880 align:start position:0%\\na way that is safe now I know what a lot\\n \\n\\n00:04:45.880 --> 00:04:47.270 align:start position:0%\\na way that is safe now I know what a lot\\nof<00:04:45.960><c> you</c><00:04:46.039><c> are</c><00:04:46.199><c> probably</c><00:04:46.479><c> thinking</c><00:04:47.039><c> wait</c>\\n\\n00:04:47.270 --> 00:04:47.280 align:start position:0%\\nof you are probably thinking wait\\n \\n\\n00:04:47.280 --> 00:04:50.749 align:start position:0%\\nof you are probably thinking wait\\ndoesn't<00:04:47.639><c> rust</c><00:04:48.240><c> have</c><00:04:48.520><c> a</c><00:04:48.919><c> cabi</c><00:04:49.919><c> explicitly</c><00:04:50.479><c> for</c>\\n\\n00:04:50.749 --> 00:04:50.759 align:start position:0%\\ndoesn't rust have a cabi explicitly for\\n \\n\\n00:04:50.759 --> 00:04:53.150 align:start position:0%\\ndoesn't rust have a cabi explicitly for\\nthis<00:04:50.960><c> reason</c><00:04:51.520><c> so</c><00:04:51.960><c> yes</c><00:04:52.240><c> the</c><00:04:52.360><c> rust</c><00:04:52.680><c> language</c>\\n\\n00:04:53.150 --> 00:04:53.160 align:start position:0%\\nthis reason so yes the rust language\\n \\n\\n00:04:53.160 --> 00:04:55.350 align:start position:0%\\nthis reason so yes the rust language\\ndoes<00:04:53.400><c> allow</c><00:04:53.759><c> you</c><00:04:53.880><c> to</c><00:04:54.080><c> create</c><00:04:54.680><c> types</c><00:04:55.120><c> and</c>\\n\\n00:04:55.350 --> 00:04:55.360 align:start position:0%\\ndoes allow you to create types and\\n \\n\\n00:04:55.360 --> 00:04:58.029 align:start position:0%\\ndoes allow you to create types and\\nfunctions<00:04:56.000><c> that</c><00:04:56.120><c> are</c><00:04:56.400><c> exposed</c><00:04:57.080><c> using</c><00:04:57.520><c> the</c><00:04:57.680><c> elf</c>\\n\\n00:04:58.029 --> 00:04:58.039 align:start position:0%\\nfunctions that are exposed using the elf\\n \\n\\n00:04:58.039 --> 00:05:01.390 align:start position:0%\\nfunctions that are exposed using the elf\\nABI<00:04:58.720><c> using</c><00:04:59.080><c> the</c><00:04:59.240><c> rep</c><00:04:59.840><c> C</c><00:05:00.280><c> syntax</c><00:05:00.880><c> reer</c><00:05:01.160><c> C</c>\\n\\n00:05:01.390 --> 00:05:01.400 align:start position:0%\\nABI using the rep C syntax reer C\\n \\n\\n00:05:01.400 --> 00:05:03.430 align:start position:0%\\nABI using the rep C syntax reer C\\ndecorator<00:05:01.960><c> basically</c><00:05:02.320><c> tells</c><00:05:02.560><c> the</c><00:05:02.680><c> r</c><00:05:02.919><c> compiler</c>\\n\\n00:05:03.430 --> 00:05:03.440 align:start position:0%\\ndecorator basically tells the r compiler\\n \\n\\n00:05:03.440 --> 00:05:05.870 align:start position:0%\\ndecorator basically tells the r compiler\\nto<00:05:03.840><c> do</c><00:05:04.000><c> what</c><00:05:04.160><c> C</c><00:05:04.479><c> does</c><00:05:04.880><c> order</c><00:05:05.199><c> the</c><00:05:05.360><c> structure</c>\\n\\n00:05:05.870 --> 00:05:05.880 align:start position:0%\\nto do what C does order the structure\\n \\n\\n00:05:05.880 --> 00:05:08.070 align:start position:0%\\nto do what C does order the structure\\nthe<00:05:06.000><c> way</c><00:05:06.120><c> that</c><00:05:06.240><c> c</c><00:05:06.560><c> would</c><00:05:07.039><c> create</c><00:05:07.520><c> symbols</c><00:05:07.960><c> the</c>\\n\\n00:05:08.070 --> 00:05:08.080 align:start position:0%\\nthe way that c would create symbols the\\n \\n\\n00:05:08.080 --> 00:05:10.270 align:start position:0%\\nthe way that c would create symbols the\\nway<00:05:08.240><c> the</c><00:05:08.360><c> C</c><00:05:08.720><c> would</c><00:05:09.000><c> or</c><00:05:09.160><c> the</c><00:05:09.280><c> way</c><00:05:09.400><c> the</c><00:05:09.520><c> elf</c><00:05:09.800><c> would</c>\\n\\n00:05:10.270 --> 00:05:10.280 align:start position:0%\\nway the C would or the way the elf would\\n \\n\\n00:05:10.280 --> 00:05:12.629 align:start position:0%\\nway the C would or the way the elf would\\nand<00:05:10.560><c> create</c><00:05:10.919><c> a</c><00:05:11.120><c> foreign</c><00:05:11.639><c> function</c><00:05:12.120><c> interface</c>\\n\\n00:05:12.629 --> 00:05:12.639 align:start position:0%\\nand create a foreign function interface\\n \\n\\n00:05:12.639 --> 00:05:14.790 align:start position:0%\\nand create a foreign function interface\\nto<00:05:12.800><c> call</c><00:05:13.080><c> through</c><00:05:13.600><c> so</c><00:05:14.039><c> doesn't</c><00:05:14.360><c> that</c><00:05:14.520><c> kind</c><00:05:14.639><c> of</c>\\n\\n00:05:14.790 --> 00:05:14.800 align:start position:0%\\nto call through so doesn't that kind of\\n \\n\\n00:05:14.800 --> 00:05:17.110 align:start position:0%\\nto call through so doesn't that kind of\\nsolve<00:05:15.039><c> our</c><00:05:15.280><c> problem</c><00:05:15.960><c> no</c><00:05:16.160><c> not</c><00:05:16.400><c> really</c><00:05:16.840><c> using</c>\\n\\n00:05:17.110 --> 00:05:17.120 align:start position:0%\\nsolve our problem no not really using\\n \\n\\n00:05:17.120 --> 00:05:19.390 align:start position:0%\\nsolve our problem no not really using\\nreer<00:05:17.479><c> C</c><00:05:17.759><c> doesn't</c><00:05:18.080><c> allow</c><00:05:18.560><c> any</c><00:05:18.800><c> of</c><00:05:18.919><c> the</c><00:05:19.039><c> rust</c>\\n\\n00:05:19.390 --> 00:05:19.400 align:start position:0%\\nreer C doesn't allow any of the rust\\n \\n\\n00:05:19.400 --> 00:05:21.270 align:start position:0%\\nreer C doesn't allow any of the rust\\nfeatures<00:05:19.880><c> to</c><00:05:20.160><c> cross</c><00:05:20.479><c> the</c><00:05:20.720><c> application</c>\\n\\n00:05:21.270 --> 00:05:21.280 align:start position:0%\\nfeatures to cross the application\\n \\n\\n00:05:21.280 --> 00:05:23.189 align:start position:0%\\nfeatures to cross the application\\nboundary<00:05:21.840><c> we</c><00:05:22.000><c> can't</c><00:05:22.280><c> expose</c><00:05:22.600><c> a</c><00:05:22.759><c> function</c><00:05:23.080><c> with</c>\\n\\n00:05:23.189 --> 00:05:23.199 align:start position:0%\\nboundary we can't expose a function with\\n \\n\\n00:05:23.199 --> 00:05:25.629 align:start position:0%\\nboundary we can't expose a function with\\nunique<00:05:23.639><c> types</c><00:05:23.960><c> ex</c><00:05:24.080><c> using</c><00:05:24.360><c> the</c><00:05:24.759><c> Exotic</c><00:05:25.319><c> typing</c>\\n\\n00:05:25.629 --> 00:05:25.639 align:start position:0%\\nunique types ex using the Exotic typing\\n \\n\\n00:05:25.639 --> 00:05:27.670 align:start position:0%\\nunique types ex using the Exotic typing\\nsystem<00:05:25.960><c> that</c><00:05:26.080><c> rust</c><00:05:26.440><c> has</c><00:05:26.759><c> and</c><00:05:26.919><c> also</c><00:05:27.280><c> any</c>\\n\\n00:05:27.670 --> 00:05:27.680 align:start position:0%\\nsystem that rust has and also any\\n \\n\\n00:05:27.680 --> 00:05:29.870 align:start position:0%\\nsystem that rust has and also any\\nfunction<00:05:28.039><c> call</c><00:05:28.400><c> that</c><00:05:28.560><c> crosses</c><00:05:29.000><c> the</c><00:05:29.160><c> repr</c><00:05:29.720><c> C</c>\\n\\n00:05:29.870 --> 00:05:29.880 align:start position:0%\\nfunction call that crosses the repr C\\n \\n\\n00:05:29.880 --> 00:05:32.670 align:start position:0%\\nfunction call that crosses the repr C\\nforeign<00:05:30.280><c> function</c><00:05:30.600><c> interface</c><00:05:31.280><c> is</c><00:05:31.639><c> unsafe</c><00:05:32.360><c> and</c>\\n\\n00:05:32.670 --> 00:05:32.680 align:start position:0%\\nforeign function interface is unsafe and\\n \\n\\n00:05:32.680 --> 00:05:34.870 align:start position:0%\\nforeign function interface is unsafe and\\ndisables<00:05:33.240><c> the</c><00:05:33.360><c> borrow</c><00:05:33.680><c> Checker</c><00:05:34.120><c> reper</c><00:05:34.680><c> is</c>\\n\\n00:05:34.870 --> 00:05:34.880 align:start position:0%\\ndisables the borrow Checker reper is\\n \\n\\n00:05:34.880 --> 00:05:37.990 align:start position:0%\\ndisables the borrow Checker reper is\\ngreat<00:05:35.120><c> for</c><00:05:35.479><c> converting</c><00:05:36.120><c> rust</c><00:05:36.560><c> code</c><00:05:37.000><c> into</c><00:05:37.319><c> a</c><00:05:37.560><c> C</c>\\n\\n00:05:37.990 --> 00:05:38.000 align:start position:0%\\ngreat for converting rust code into a C\\n \\n\\n00:05:38.000 --> 00:05:40.629 align:start position:0%\\ngreat for converting rust code into a C\\nlibrary<00:05:38.680><c> but</c><00:05:38.880><c> not</c><00:05:39.120><c> for</c><00:05:39.400><c> creating</c><00:05:39.880><c> rust</c><00:05:40.360><c> to</c>\\n\\n00:05:40.629 --> 00:05:40.639 align:start position:0%\\nlibrary but not for creating rust to\\n \\n\\n00:05:40.639 --> 00:05:43.590 align:start position:0%\\nlibrary but not for creating rust to\\nrust<00:05:41.120><c> binary</c><00:05:41.680><c> objects</c><00:05:42.440><c> now</c><00:05:42.759><c> luckily</c><00:05:43.280><c> I'm</c><00:05:43.400><c> not</c>\\n\\n00:05:43.590 --> 00:05:43.600 align:start position:0%\\nrust binary objects now luckily I'm not\\n \\n\\n00:05:43.600 --> 00:05:45.189 align:start position:0%\\nrust binary objects now luckily I'm not\\nthe<00:05:43.720><c> only</c><00:05:43.880><c> one</c><00:05:44.080><c> talking</c><00:05:44.360><c> about</c><00:05:44.560><c> this</c><00:05:44.840><c> problem</c>\\n\\n00:05:45.189 --> 00:05:45.199 align:start position:0%\\nthe only one talking about this problem\\n \\n\\n00:05:45.199 --> 00:05:46.830 align:start position:0%\\nthe only one talking about this problem\\nthere<00:05:45.319><c> are</c><00:05:45.560><c> plenty</c><00:05:45.840><c> of</c><00:05:46.000><c> people</c><00:05:46.319><c> much</c><00:05:46.479><c> smarter</c>\\n\\n00:05:46.830 --> 00:05:46.840 align:start position:0%\\nthere are plenty of people much smarter\\n \\n\\n00:05:46.840 --> 00:05:48.550 align:start position:0%\\nthere are plenty of people much smarter\\nthan<00:05:46.960><c> me</c><00:05:47.160><c> that</c><00:05:47.280><c> have</c><00:05:47.440><c> open</c><00:05:47.759><c> merge</c><00:05:48.080><c> requests</c>\\n\\n00:05:48.550 --> 00:05:48.560 align:start position:0%\\nthan me that have open merge requests\\n \\n\\n00:05:48.560 --> 00:05:51.350 align:start position:0%\\nthan me that have open merge requests\\ninto<00:05:49.080><c> the</c><00:05:49.280><c> Russ</c><00:05:49.639><c> langang</c><00:05:49.919><c> Master</c><00:05:50.479><c> to</c><00:05:50.840><c> produce</c>\\n\\n00:05:51.350 --> 00:05:51.360 align:start position:0%\\ninto the Russ langang Master to produce\\n \\n\\n00:05:51.360 --> 00:05:53.790 align:start position:0%\\ninto the Russ langang Master to produce\\ntheir<00:05:51.600><c> own</c><00:05:52.080><c> abis</c><00:05:52.880><c> now</c><00:05:53.080><c> this</c><00:05:53.280><c> problem</c><00:05:53.600><c> will</c>\\n\\n00:05:53.790 --> 00:05:53.800 align:start position:0%\\ntheir own abis now this problem will\\n \\n\\n00:05:53.800 --> 00:05:55.629 align:start position:0%\\ntheir own abis now this problem will\\nrequire<00:05:54.199><c> the</c><00:05:54.319><c> entire</c><00:05:54.639><c> Russ</c><00:05:54.960><c> Community</c><00:05:55.400><c> to</c><00:05:55.520><c> get</c>\\n\\n00:05:55.629 --> 00:05:55.639 align:start position:0%\\nrequire the entire Russ Community to get\\n \\n\\n00:05:55.639 --> 00:05:57.790 align:start position:0%\\nrequire the entire Russ Community to get\\non<00:05:55.800><c> board</c><00:05:56.160><c> probably</c><00:05:56.440><c> with</c><00:05:56.639><c> one</c><00:05:56.919><c> ABI</c><00:05:57.520><c> that</c><00:05:57.639><c> is</c>\\n\\n00:05:57.790 --> 00:05:57.800 align:start position:0%\\non board probably with one ABI that is\\n \\n\\n00:05:57.800 --> 00:05:59.070 align:start position:0%\\non board probably with one ABI that is\\nthe<00:05:57.919><c> most</c><00:05:58.120><c> feature</c><00:05:58.440><c> complete</c><00:05:58.720><c> and</c><00:05:58.800><c> makes</c><00:05:58.960><c> the</c>\\n\\n00:05:59.070 --> 00:05:59.080 align:start position:0%\\nthe most feature complete and makes the\\n \\n\\n00:05:59.080 --> 00:06:00.350 align:start position:0%\\nthe most feature complete and makes the\\nmost<00:05:59.199><c> sense</c><00:05:59.479><c> before</c><00:05:59.639><c> we</c><00:05:59.720><c> can</c><00:05:59.800><c> make</c><00:05:59.919><c> meaningful</c>\\n\\n00:06:00.350 --> 00:06:00.360 align:start position:0%\\nmost sense before we can make meaningful\\n \\n\\n00:06:00.360 --> 00:06:01.749 align:start position:0%\\nmost sense before we can make meaningful\\nprogress<00:06:00.840><c> you</c><00:06:00.919><c> can</c><00:06:01.039><c> go</c><00:06:01.160><c> check</c><00:06:01.280><c> out</c><00:06:01.400><c> this</c><00:06:01.520><c> poll</c>\\n\\n00:06:01.749 --> 00:06:01.759 align:start position:0%\\nprogress you can go check out this poll\\n \\n\\n00:06:01.759 --> 00:06:02.749 align:start position:0%\\nprogress you can go check out this poll\\nrequest<00:06:02.039><c> I'll</c><00:06:02.160><c> put</c><00:06:02.280><c> the</c><00:06:02.400><c> link</c><00:06:02.560><c> in</c><00:06:02.639><c> the</c>\\n\\n00:06:02.749 --> 00:06:02.759 align:start position:0%\\nrequest I'll put the link in the\\n \\n\\n00:06:02.759 --> 00:06:04.749 align:start position:0%\\nrequest I'll put the link in the\\ndescription<00:06:03.160><c> below</c><00:06:03.759><c> uh</c><00:06:03.880><c> by</c><00:06:04.000><c> Josh</c><00:06:04.280><c> triplet</c>\\n\\n00:06:04.749 --> 00:06:04.759 align:start position:0%\\ndescription below uh by Josh triplet\\n \\n\\n00:06:04.759 --> 00:06:06.749 align:start position:0%\\ndescription below uh by Josh triplet\\nwhich<00:06:04.960><c> exposes</c><00:06:05.639><c> the</c><00:06:05.919><c> feature</c><00:06:06.360><c> for</c><00:06:06.599><c> an</c>\\n\\n00:06:06.749 --> 00:06:06.759 align:start position:0%\\nwhich exposes the feature for an\\n \\n\\n00:06:06.759 --> 00:06:08.629 align:start position:0%\\nwhich exposes the feature for an\\nexperimental<00:06:07.199><c> feature</c><00:06:07.560><c> gate</c><00:06:07.840><c> to</c><00:06:08.160><c> create</c><00:06:08.479><c> a</c>\\n\\n00:06:08.629 --> 00:06:08.639 align:start position:0%\\nexperimental feature gate to create a\\n \\n\\n00:06:08.639 --> 00:06:11.950 align:start position:0%\\nexperimental feature gate to create a\\nnew<00:06:08.960><c> API</c><00:06:09.599><c> called</c><00:06:10.000><c> Krabby</c><00:06:10.599><c> or</c><00:06:10.919><c> crab</c><00:06:11.360><c> API</c><00:06:11.880><c> which</c>\\n\\n00:06:11.950 --> 00:06:11.960 align:start position:0%\\nnew API called Krabby or crab API which\\n \\n\\n00:06:11.960 --> 00:06:13.550 align:start position:0%\\nnew API called Krabby or crab API which\\nis<00:06:12.080><c> pretty</c><00:06:12.280><c> funny</c><00:06:12.680><c> motivation</c><00:06:13.080><c> here</c><00:06:13.199><c> is</c><00:06:13.319><c> today</c>\\n\\n00:06:13.550 --> 00:06:13.560 align:start position:0%\\nis pretty funny motivation here is today\\n \\n\\n00:06:13.560 --> 00:06:14.589 align:start position:0%\\nis pretty funny motivation here is today\\ndevelopers<00:06:13.960><c> building</c><00:06:14.280><c> projects</c>\\n\\n00:06:14.589 --> 00:06:14.599 align:start position:0%\\ndevelopers building projects\\n \\n\\n00:06:14.599 --> 00:06:15.950 align:start position:0%\\ndevelopers building projects\\nincorporating<00:06:15.039><c> multiple</c><00:06:15.319><c> languages</c><00:06:15.800><c> or</c>\\n\\n00:06:15.950 --> 00:06:15.960 align:start position:0%\\nincorporating multiple languages or\\n \\n\\n00:06:15.960 --> 00:06:17.270 align:start position:0%\\nincorporating multiple languages or\\ncalling<00:06:16.240><c> a</c><00:06:16.400><c> library</c><00:06:16.759><c> written</c><00:06:17.000><c> in</c><00:06:17.120><c> one</c>\\n\\n00:06:17.270 --> 00:06:17.280 align:start position:0%\\ncalling a library written in one\\n \\n\\n00:06:17.280 --> 00:06:19.110 align:start position:0%\\ncalling a library written in one\\nlanguage<00:06:17.560><c> from</c><00:06:17.759><c> another</c><00:06:18.280><c> often</c><00:06:18.520><c> have</c><00:06:18.680><c> to</c><00:06:18.800><c> use</c>\\n\\n00:06:19.110 --> 00:06:19.120 align:start position:0%\\nlanguage from another often have to use\\n \\n\\n00:06:19.120 --> 00:06:21.350 align:start position:0%\\nlanguage from another often have to use\\nthe<00:06:19.240><c> cabi</c><00:06:19.960><c> and</c><00:06:20.080><c> that's</c><00:06:20.240><c> reer</c><00:06:20.520><c> C</c><00:06:20.759><c> from</c><00:06:20.919><c> before</c>\\n\\n00:06:21.350 --> 00:06:21.360 align:start position:0%\\nthe cabi and that's reer C from before\\n \\n\\n00:06:21.360 --> 00:06:23.189 align:start position:0%\\nthe cabi and that's reer C from before\\nas<00:06:21.479><c> the</c><00:06:21.639><c> lowest</c><00:06:22.080><c> common</c><00:06:22.360><c> denominator</c><00:06:22.919><c> for</c>\\n\\n00:06:23.189 --> 00:06:23.199 align:start position:0%\\nas the lowest common denominator for\\n \\n\\n00:06:23.199 --> 00:06:25.070 align:start position:0%\\nas the lowest common denominator for\\ncross<00:06:23.680><c> language</c><00:06:24.039><c> function</c><00:06:24.360><c> calls</c><00:06:24.840><c> as</c><00:06:24.919><c> a</c>\\n\\n00:06:25.070 --> 00:06:25.080 align:start position:0%\\ncross language function calls as a\\n \\n\\n00:06:25.080 --> 00:06:27.150 align:start position:0%\\ncross language function calls as a\\nresult<00:06:25.520><c> such</c><00:06:25.800><c> cross-</c><00:06:26.120><c> language</c><00:06:26.440><c> calls</c><00:06:26.800><c> use</c>\\n\\n00:06:27.150 --> 00:06:27.160 align:start position:0%\\nresult such cross- language calls use\\n \\n\\n00:06:27.160 --> 00:06:29.510 align:start position:0%\\nresult such cross- language calls use\\nunsafe<00:06:27.639><c> C</c><00:06:27.880><c> representations</c><00:06:28.560><c> again</c><00:06:28.759><c> reper</c><00:06:29.120><c> C</c>\\n\\n00:06:29.510 --> 00:06:29.520 align:start position:0%\\nunsafe C representations again reper C\\n \\n\\n00:06:29.520 --> 00:06:31.790 align:start position:0%\\nunsafe C representations again reper C\\neven<00:06:29.680><c> for</c><00:06:29.960><c> types</c><00:06:30.319><c> that</c><00:06:30.560><c> both</c><00:06:30.880><c> languages</c>\\n\\n00:06:31.790 --> 00:06:31.800 align:start position:0%\\neven for types that both languages\\n \\n\\n00:06:31.800 --> 00:06:33.430 align:start position:0%\\neven for types that both languages\\nunderstand<00:06:32.280><c> for</c><00:06:32.440><c> example</c><00:06:33.039><c> passing</c><00:06:33.280><c> an</c>\\n\\n00:06:33.430 --> 00:06:33.440 align:start position:0%\\nunderstand for example passing an\\n \\n\\n00:06:33.440 --> 00:06:34.950 align:start position:0%\\nunderstand for example passing an\\ninstance<00:06:33.800><c> from</c><00:06:33.960><c> rust</c><00:06:34.280><c> to</c><00:06:34.400><c> another</c><00:06:34.599><c> high</c><00:06:34.759><c> level</c>\\n\\n00:06:34.950 --> 00:06:34.960 align:start position:0%\\ninstance from rust to another high level\\n \\n\\n00:06:34.960 --> 00:06:37.150 align:start position:0%\\ninstance from rust to another high level\\nlanguage<00:06:35.400><c> we</c><00:06:35.560><c> typically</c><00:06:35.840><c> use</c><00:06:36.039><c> the</c><00:06:36.160><c> unsafe</c><00:06:36.720><c> C</c>\\n\\n00:06:37.150 --> 00:06:37.160 align:start position:0%\\nlanguage we typically use the unsafe C\\n \\n\\n00:06:37.160 --> 00:06:39.550 align:start position:0%\\nlanguage we typically use the unsafe C\\ncarear<00:06:37.800><c> even</c><00:06:38.000><c> if</c><00:06:38.319><c> both</c><00:06:38.520><c> languages</c><00:06:39.000><c> have</c><00:06:39.199><c> safe</c>\\n\\n00:06:39.550 --> 00:06:39.560 align:start position:0%\\ncarear even if both languages have safe\\n \\n\\n00:06:39.560 --> 00:06:42.270 align:start position:0%\\ncarear even if both languages have safe\\ntypes<00:06:39.840><c> for</c><00:06:40.120><c> counted</c><00:06:40.599><c> utf8</c><00:06:41.400><c> strings</c><00:06:42.039><c> and</c><00:06:42.160><c> like</c>\\n\\n00:06:42.270 --> 00:06:42.280 align:start position:0%\\ntypes for counted utf8 strings and like\\n \\n\\n00:06:42.280 --> 00:06:44.270 align:start position:0%\\ntypes for counted utf8 strings and like\\nI<00:06:42.400><c> said</c><00:06:42.599><c> before</c><00:06:43.000><c> also</c><00:06:43.319><c> furthermore</c><00:06:44.039><c> higher</c>\\n\\n00:06:44.270 --> 00:06:44.280 align:start position:0%\\nI said before also furthermore higher\\n \\n\\n00:06:44.280 --> 00:06:46.270 align:start position:0%\\nI said before also furthermore higher\\nlevel<00:06:44.520><c> data</c><00:06:44.759><c> types</c><00:06:45.000><c> such</c><00:06:45.120><c> as</c><00:06:45.280><c> option</c><00:06:45.720><c> and</c><00:06:45.840><c> rust</c>\\n\\n00:06:46.270 --> 00:06:46.280 align:start position:0%\\nlevel data types such as option and rust\\n \\n\\n00:06:46.280 --> 00:06:49.110 align:start position:0%\\nlevel data types such as option and rust\\ncurrently<00:06:46.680><c> require</c><00:06:47.080><c> translations</c><00:06:47.840><c> into</c><00:06:48.160><c> cabi</c>\\n\\n00:06:49.110 --> 00:06:49.120 align:start position:0%\\ncurrently require translations into cabi\\n \\n\\n00:06:49.120 --> 00:06:50.950 align:start position:0%\\ncurrently require translations into cabi\\ncompatible<00:06:49.599><c> types</c><00:06:50.039><c> which</c><00:06:50.199><c> discourages</c><00:06:50.800><c> the</c>\\n\\n00:06:50.950 --> 00:06:50.960 align:start position:0%\\ncompatible types which discourages the\\n \\n\\n00:06:50.960 --> 00:06:52.870 align:start position:0%\\ncompatible types which discourages the\\nuse<00:06:51.280><c> of</c><00:06:51.479><c> such</c><00:06:51.720><c> types</c><00:06:52.000><c> in</c><00:06:52.160><c> Cross</c><00:06:52.560><c> language</c>\\n\\n00:06:52.870 --> 00:06:52.880 align:start position:0%\\nuse of such types in Cross language\\n \\n\\n00:06:52.880 --> 00:06:54.870 align:start position:0%\\nuse of such types in Cross language\\ninterfaces<00:06:53.400><c> again</c><00:06:53.599><c> we</c><00:06:53.680><c> don't</c><00:06:53.880><c> have</c><00:06:54.000><c> a</c><00:06:54.240><c> way</c><00:06:54.639><c> of</c>\\n\\n00:06:54.870 --> 00:06:54.880 align:start position:0%\\ninterfaces again we don't have a way of\\n \\n\\n00:06:54.880 --> 00:06:57.430 align:start position:0%\\ninterfaces again we don't have a way of\\ncommunicating<00:06:55.720><c> a</c><00:06:55.879><c> generic</c><00:06:56.319><c> type</c><00:06:56.560><c> an</c><00:06:56.840><c> option</c><00:06:57.160><c> t</c>\\n\\n00:06:57.430 --> 00:06:57.440 align:start position:0%\\ncommunicating a generic type an option t\\n \\n\\n00:06:57.440 --> 00:07:00.510 align:start position:0%\\ncommunicating a generic type an option t\\nor<00:06:57.680><c> result</c><00:06:58.000><c> te</c><00:06:58.960><c> so</c><00:06:59.639><c> go</c><00:06:59.800><c> check</c><00:07:00.000><c> out</c><00:07:00.120><c> this</c><00:07:00.240><c> pull</c>\\n\\n00:07:00.510 --> 00:07:00.520 align:start position:0%\\nor result te so go check out this pull\\n \\n\\n00:07:00.520 --> 00:07:01.990 align:start position:0%\\nor result te so go check out this pull\\nrequest<00:07:00.840><c> I</c><00:07:00.919><c> think</c><00:07:01.039><c> it's</c><00:07:01.199><c> pretty</c><00:07:01.400><c> interesting</c>\\n\\n00:07:01.990 --> 00:07:02.000 align:start position:0%\\nrequest I think it's pretty interesting\\n \\n\\n00:07:02.000 --> 00:07:04.790 align:start position:0%\\nrequest I think it's pretty interesting\\nthe<00:07:02.160><c> entire</c><00:07:02.639><c> world</c><00:07:03.120><c> of</c><00:07:03.360><c> abis</c><00:07:04.120><c> and</c><00:07:04.240><c> how</c><00:07:04.360><c> to</c><00:07:04.520><c> make</c>\\n\\n00:07:04.790 --> 00:07:04.800 align:start position:0%\\nthe entire world of abis and how to make\\n \\n\\n00:07:04.800 --> 00:07:06.270 align:start position:0%\\nthe entire world of abis and how to make\\nsystems<00:07:05.160><c> more</c><00:07:05.360><c> interoperable</c><00:07:05.960><c> is</c><00:07:06.080><c> really</c>\\n\\n00:07:06.270 --> 00:07:06.280 align:start position:0%\\nsystems more interoperable is really\\n \\n\\n00:07:06.280 --> 00:07:07.990 align:start position:0%\\nsystems more interoperable is really\\ninteresting<00:07:06.639><c> to</c><00:07:06.759><c> me</c><00:07:07.240><c> now</c><00:07:07.560><c> let</c><00:07:07.680><c> me</c><00:07:07.800><c> know</c><00:07:07.919><c> what</c>\\n\\n00:07:07.990 --> 00:07:08.000 align:start position:0%\\ninteresting to me now let me know what\\n \\n\\n00:07:08.000 --> 00:07:09.670 align:start position:0%\\ninteresting to me now let me know what\\nyou<00:07:08.120><c> think</c><00:07:08.280><c> down</c><00:07:08.400><c> in</c><00:07:08.520><c> the</c><00:07:08.680><c> comments</c><00:07:09.120><c> will</c><00:07:09.280><c> Rust</c>\\n\\n00:07:09.670 --> 00:07:09.680 align:start position:0%\\nyou think down in the comments will Rust\\n \\n\\n00:07:09.680 --> 00:07:12.350 align:start position:0%\\nyou think down in the comments will Rust\\nlibraries<00:07:10.400><c> ever</c><00:07:10.759><c> exist</c><00:07:11.280><c> will</c><00:07:11.479><c> shared</c><00:07:11.960><c> objects</c>\\n\\n00:07:12.350 --> 00:07:12.360 align:start position:0%\\nlibraries ever exist will shared objects\\n \\n\\n00:07:12.360 --> 00:07:14.430 align:start position:0%\\nlibraries ever exist will shared objects\\nrule<00:07:12.639><c> the</c><00:07:12.800><c> world</c><00:07:13.160><c> and</c><00:07:13.319><c> will</c><00:07:13.560><c> Rust</c><00:07:14.039><c> always</c>\\n\\n00:07:14.430 --> 00:07:14.440 align:start position:0%\\nrule the world and will Rust always\\n \\n\\n00:07:14.440 --> 00:07:16.749 align:start position:0%\\nrule the world and will Rust always\\ncompile<00:07:15.039><c> into</c><00:07:15.240><c> these</c><00:07:15.479><c> gigantic</c><00:07:16.160><c> amorphous</c>\\n\\n00:07:16.749 --> 00:07:16.759 align:start position:0%\\ncompile into these gigantic amorphous\\n \\n\\n00:07:16.759 --> 00:07:18.510 align:start position:0%\\ncompile into these gigantic amorphous\\nmonoliths<00:07:17.479><c> if</c><00:07:17.560><c> you</c><00:07:17.680><c> like</c><00:07:17.879><c> this</c><00:07:17.960><c> video</c><00:07:18.160><c> do</c><00:07:18.319><c> me</c><00:07:18.400><c> a</c>\\n\\n00:07:18.510 --> 00:07:18.520 align:start position:0%\\nmonoliths if you like this video do me a\\n \\n\\n00:07:18.520 --> 00:07:20.629 align:start position:0%\\nmonoliths if you like this video do me a\\nfavor<00:07:18.800><c> hit</c><00:07:19.039><c> like</c><00:07:19.400><c> hit</c><00:07:19.639><c> subscribe</c><00:07:20.280><c> and</c><00:07:20.360><c> then</c><00:07:20.520><c> go</c>\\n\\n00:07:20.629 --> 00:07:20.639 align:start position:0%\\nfavor hit like hit subscribe and then go\\n \\n\\n00:07:20.639 --> 00:07:22.430 align:start position:0%\\nfavor hit like hit subscribe and then go\\ncheck<00:07:20.879><c> out</c><00:07:21.080><c> this</c><00:07:21.280><c> other</c><00:07:21.520><c> video</c><00:07:22.000><c> about</c><00:07:22.280><c> an</c>\\n\\n00:07:22.430 --> 00:07:22.440 align:start position:0%\\ncheck out this other video about an\\n \\n\\n00:07:22.440 --> 00:07:24.909 align:start position:0%\\ncheck out this other video about an\\ninternet<00:07:23.160><c> enabled</c><00:07:24.160><c> I'm</c><00:07:24.280><c> not</c><00:07:24.360><c> going</c><00:07:24.479><c> to</c><00:07:24.599><c> say</c><00:07:24.759><c> it</c>\\n\\n00:07:24.909 --> 00:07:24.919 align:start position:0%\\ninternet enabled I'm not going to say it\\n \\n\\n00:07:24.919 --> 00:07:27.960 align:start position:0%\\ninternet enabled I'm not going to say it\\nbut<00:07:25.199><c> you</c><00:07:25.400><c> you'll</c><00:07:25.560><c> see</c>\\n\\n\",\"file_type\":\"Srt\"}}]", "[{\"file_name\":{\"Windows\":[119,104,121,32,114,117,115,116,32,108,105,98,114,97,114,105,101,115,32,109,97,121,32,110,101,118,101,114,32,101,120,105,115,116,46,32,91,55,54,57,86,113,78,117,112,50,49,81,93]},\"contents\":\"rust libraries may never exist and it's for this exact reason that when you build anything in Rust you need to download like a thousand crates in cargo and spend the next decade of your life compiling your project now the rabbit hole on this one goes deep so stick around until the end I'm lowle learning I make videos on YouTube about programming and software security Now rust is one of my favorite programming languages I'm a security researcher and I honestly believe that the features in Rust like the borrow Checker and the runtime access checks will Usher in a new era of safer software every major system in the world is written in the C language that's the Linux kernel and a bunch of other really foundational software and while C is extremely fast the language offers programmers too many opportunities to shoot themselves in the face from a security standpoint and despite the dozens of skill issue arguments and the dozens of security features that seem to get added to the C language and the C standard libraries on a daily basis still remains that 70% of security vulnerabilities originate from memory issues in C but at the same time I completely acknowledge that rust isn't the most straightforward language to learn with the syntax is a little messy and sometimes the compiler gets mad at you and then the compile time takes forever so why is that why does rust take forever to compile and why are the binary so huge now fortunately libraries would fix all of this but unfortunately rust libraries don't actually exist and they may never exist and so before you tell me about cargo and how cargo crate are libraries you download and hold your horses cargo is a package manager and it does manage libraries but these libraries aren't the same as libraries and languages like C let me explain every program you write in C for example depends on the gnu C library or libc functions that you use in every piece of code like open or read or write or close are already already written for you luckily and more importantly they're already compiled for you lipy exists as a shared object which lives on your file system as a file that your loader can reach into for functions that it needs to run the program at runtime and the reason the C language is able to do this and specifically in Linux is because of the definition of the E.L application binary interface or the ABI defined for the elf file format that adheres to function calls in a way that are compatible with C this ABI exposes an interface for your program an elf to reach into another elf and find any function that it needs the elf ABI specifies a table of functions or a symbol table that a program can parse specifically to find a function that is exported by that program and this is exactly how libc exposes function calls this ABI also guarantees that the data defined in one program is in the same order and in the same location as another so so struct x with elements a b and c will always be in that order a b and c this allows interoperability between not just functions but data in libraries as well now this is where it starts to get a little crazy rust does not at this time have a stable ABI or an application binary interface to share information across multiple binaries so cargo packages exist but rust libraries don't all the cargo package is is a blob of source that you locally compile and it can binds all of that code into one big blob of code inside of a singular elf so effectively anytime you compile a rust program you are compiling every cargo package together required for that project and smashing them all into a single binary hence the high compile times and hence the high binary sizes so how do we fix this the answer is not simple organizing an ABI for a language and spec like the C elf is pretty simple mainly because C is just a high level abstraction around a assembly so there isn't too much information to hide just basic types and function calls rust on the other hand is a different beast stru and rust really aren't guaranteed to be in any particular order across program boundaries as long as a and b are in the structure it's fine also generics create a whole other world of problems because they're statically dispatched and built at compile time as well as many other complex issues with types in the language also a ton of power and rust comes from compile time static analyzers that run checks like the borrow Checker which isn't possible if there's a compiled binary if I pass a mutable reference into a compiled binary how is it possible for the borrow Checker to make sure that the reference is used in a way that is safe now I know what a lot of you are probably thinking wait doesn't rust have a cabi explicitly for this reason so yes the rust language does allow you to create types and functions that are exposed using the elf ABI using the rep C syntax reer C decorator basically tells the r compiler to do what C does order the structure the way that c would create symbols the way the C would or the way the elf would and create a foreign function interface to call through so doesn't that kind of solve our problem no not really using reer C doesn't allow any of the rust features to cross the application boundary we can't expose a function with unique types ex using the Exotic typing system that rust has and also any function call that crosses the repr C foreign function interface is unsafe and disables the borrow Checker reper is great for converting rust code into a C library but not for creating rust to rust binary objects now luckily I'm not the only one talking about this problem there are plenty of people much smarter than me that have open merge requests into the Russ langang Master to produce their own abis now this problem will require the entire Russ Community to get on board probably with one ABI that is the most feature complete and makes the most sense before we can make meaningful progress you can go check out this poll request I'll put the link in the description below uh by Josh triplet which exposes the feature for an experimental feature gate to create a new API called Krabby or crab API which is pretty funny motivation here is today developers building projects incorporating multiple languages or calling a library written in one language from another often have to use the cabi and that's reer C from before as the lowest common denominator for cross language function calls as a result such cross- language calls use unsafe C representations again reper C even for types that both languages understand for example passing an instance from rust to another high level language we typically use the unsafe C carear even if both languages have safe types for counted utf8 strings and like I said before also furthermore higher level data types such as option and rust currently require translations into cabi compatible types which discourages the use of such types in Cross language interfaces again we don't have a way of communicating a generic type an option t or result te so go check out this pull request I think it's pretty interesting the entire world of abis and how to make systems more interoperable is really interesting to me now let me know what you think down in the comments will Rust libraries ever exist will shared objects rule the world and will Rust always compile into these gigantic amorphous monoliths if you like this video do me a favor hit like hit subscribe and then go check out this other video about an internet enabled I'm not going to say it\",\"file_type\":\"Text\"}]")]
    fn youtube_transcribe_tests(#[case] ser_file_type: &str, #[case] ser_expected: &str) {
        let input_files: Vec<FileType> = serde_json::from_str(ser_file_type).unwrap();
        let expected: Vec<StringFile> = serde_json::from_str(ser_expected).unwrap();

        let results: Vec<StringFile> = input_files.into_iter().map(|file| transcribe_file(file).expect("transcription should be valid")).collect();
        assert_eq!(results, expected);
    }
}
